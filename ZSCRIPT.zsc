version "4.5"

#include "ZScript/FollowerHandler.zsc"
#include "ZScript/Data.zsc"
#include "ZScript/Resurrection.zsc"
#include "ZScript/Armor.zsc"
#include "ZScript/Medical.zsc"
#include "ZScript/Weapons.zsc"
#include "ZScript/AI.zsc"
#include "ZScript/Goals.zsc"
#include "ZScript/Orders.zsc"
#include "ZScript/Targeting.zsc"
#include "ZScript/Brass.zsc"
#include "ZScript/Loadout.zsc"

#include "ZScript/Followers/Freylis.zsc"
#include "ZScript/Followers/Balthazar.zsc"
#include "ZScript/Followers/Valnos.zsc"
#include "ZScript/Followers/Daina.zsc"
#include "ZScript/Followers/Sewie.zsc"
#include "ZScript/Followers/Nari.zsc"

class HDFollower : HDMobMan abstract
{
	enum PrintMessageType
	{
		PMType_Forced,
		PMType_Critical,
		PMType_Important,
		PMType_General
	}

	// --------------------------------------------------
	// NEVER GONNA TOUCH THESE PROBABLY
	// --------------------------------------------------

	private HDBleedingWound GetBleedThinker()
	{
		ThinkerIterator it = ThinkerIterator.Create("HDBleedingWound", STAT_DEFAULT);
		HDBleedingWound BleedThinker;
		while ((BleedThinker = HDBleedingWound(it.Next())))
		{
			if (BleedThinker.bleeder == self)
			{
				return BleedThinker;
			}
		}
		return BleedThinker;
	}

	bool IsDeadOrMissing()
	{
		bool FollowerDead = Health <= 0;
		bool TooFar = self.Distance2D(LinkedPlayer) >= 384;

		return TooFar || FollowerDead;
	}

	clearscope bool CanInteractWith()
	{
		return Health > 0 && bFRIENDLY || Health <= 0;
	}

	void WarpToPlayer()
	{
		Warp(LinkedPlayer, 16, flags: WARPF_NOCHECKPOSITION);
	}

	private void PrintMessage(string message, string voiceLine, PrintMessageType type)
	{
		if (Health <= 0 || bSILENT)
		{
			return;
		}

		if (type <= hdf_printlevel_chat)
		{
			LinkedPlayer.A_Log("\c[White]"..GetTag()..": \c[Green]"..message.."\c-");
			LinkedPlayer.A_StartSound("misc/chat", 20, CHANF_LOCAL);
		}
		if (type <= hdf_printlevel_voice)
		{
			if (Distance3D(LinkedPlayer) < 512)
			{
				A_StartSound(voiceLine, 21);
			}
			else
			{
				LinkedPlayer.A_StartSound(voiceLine, 21, CHANF_LOCAL);
			}
		}
	}

	private string GetResponse(string raw, int maxIndex = 3)
	{
		return StringTable.Localize(raw.."_"..random(1, max(1, maxIndex)));
	}

	static void ThinkMessage(Actor other, string message)
	{
		other.A_Print(StringTable.Localize(message));
	}

	private bool PlayerIsCrouching()
	{
		return LinkedPlayer.player.crouchfactor <= 0.5;
	}

	private bool IsFacedByPlayer()
	{
		double PAngle = LinkedPlayer.angle;
		double PAngleTo = self.AngleTo(LinkedPlayer) + 180; // [Ace] Add 180 to invert direction, otherwise you need to face away from the follower.
		return AbsAngle(PAngle, PAngleTo) <= MaxFaceAngle;
	}

	clearscope string GetPronoun(bool upper)
	{
		// [Ace] Personal pronouns, objective case, third person singular.
		switch (Gender)
		{
			case GENDER_MALE: return upper ? "Him" : "him";
			case GENDER_FEMALE: return upper ? "Her" : "her";
			case GENDER_NEUTRAL: return upper ? "It" : "it";
			case GENDER_OTHER: return upper ? "Them" : "them";
		}

		return "??????";
	}

	// --------------------------------------------------
	// TICKER
	// --------------------------------------------------

	override void Tick()
	{
		Super.Tick();

		if (!LinkedPlayer) // [Ace] If this ever goes null, something is horribly wrong.
		{
			return;
		}

		if (!OhanaMode) { OhanaMode = CVar.GetCVar('hdf_ohana'); }

		CanSeePlayer = CheckSight(LinkedPlayer, SF_SEEPASTSHOOTABLELINES);
		DistanceToPlayer = Distance3D(LinkedPlayer);

		if (OhanaMode.GetBool() && (CanSeePlayer && DistanceToPlayer > 840 || !CanSeePlayer && DistanceToPlayer > 210))
		{
			OhanaTicker++;
			if (OhanaTicker >= OhanaDeathTime && Health > 0)
			{
				A_Die();
			}
			else if (OhanaTicker >= OhanaDisappearTime)
			{
				Handler.RemoveFollower(self, true);
				return;
			}
		}
		else
		{
			OhanaTicker = 0;
		}

		if (bFRIENDLY && Health > 0 && LinkedPlayer.Health <= 0)
		{
			return;
		}

		// [Ace] Only tick timer if idling.
		if (!Moving)
		{
			IdleTimer--;
			TauntTimer--;
		}

		if (Health > 0)
		{
			if (Status == FStatus_WaitingForArmor)
			{
				if (Distance3D(LinkedPlayer) > 512)
				{
					PrintMessage(GetResponse("$"..GetTag().MakeUpper().."_ARMORGIVE_RANAWAY"), "Follower/"..GetTag().."/ArmorGive/RanAway", PMType_Critical);
					Status = FStatus_None;
				}
				else if (level.time % 35 == 0)
				{
					A_Face(LinkedPlayer);
					LookForArmor();
				}
			}

			if (level.time % 5 == 0 && Status != FStatus_InactiveOrDead && !InStateSequence(CurState, FindState("Spawn")))
			{
				AiThink();
			}

			if (level.time % 35 * 2 == 0)
			{
				if (Bloodloss > 0)
				{
					Bloodloss--;
				}
			}
		}
	}

	override string GetObituary(Actor victim, Actor inflictor, Name mod, bool playerattack)
	{
		return String.Format("%s suffered friendly fire from %s, but friendly fire, isn't.", HDPlayerPawn(victim).player.GetUserName(), inflictor.target ? inflictor.target.GetTag() : inflictor.GetTag());
	}

	// --------------------------------------------------
	// INITIALIZATION
	// --------------------------------------------------

	override void BeginPlay()
	{
		Handler = FollowerHandler(EventHandler.Find('FollowerHandler'));

		Super.BeginPlay();
	}

	override void PostBeginPlay()
	{
		ResetIdleTimer();
		ResetTauntTimer();

		Super.PostBeginPlay();

		// [Ace] I gotta defer setting these until after Super.PostBeginPlay() is called or else picking up the incapped follower and placing them again heals them partially.
		Bloodloss = NewBloodloss;
		BodyDamage = NewBodyDamage;
		Stunned = NewStunned;

		// [Ace] Same as above. For some reason HDMagicShield gets nuked if given while unpacking the follower.
		if (Shields > 0)
		{
			let ShieldInv = GiveInventoryType('HDMagicShield');
			ShieldInv.Amount = Shields;
			ShieldInv.MaxAmount = MaxShields;
			ShieldInv.bQUICKTORETALIATE = NoShieldsDegeneration;
			ShieldInv.bSTANDSTILL = RegenerateShields;
		}
	}

	const MaxInventoryDistance = 48;
	const MaxFaceAngle = 20;

	private transient CVar OhanaMode;
	private int OhanaTicker;
	const OhanaDeathTime = 35 * 60 * 5;
	const OhanaDisappearTime = 35 * 60 * 15;

	FollowerHandler Handler;

	protected double MovementSpeed, MaxMovementSpeed;
	property MovementSpeed: MovementSpeed, MaxMovementSpeed;

	meta int ResurrectType;
	property ResurrectType: ResurrectType;

	meta int Index;
	meta EPlayerGender Gender;
	meta class<FollowerBody> DataClass;
	meta class<LeftBehindFollower> MissingClass;
	property FollowerInfo: Index, Gender, DataClass, MissingClass;

	private int BehaviourFlags;
	flagdef Silent: BehaviourFlags, 0;

	Default
	{
		Health 200;
		Radius 12;
		Height 52;
		HDFollower.MovementSpeed 3, 7;
		Scale 1.00;
		XScale 1.06;
		PainChance 192;
		MaxStepHeight 80;
		MaxDropOffHeight 128;
		MaxTargetRange 4200;
		+ROLLCENTER
		+ROLLSPRITE
		+FRIENDLY
		+NODAMAGETHRUST
		+SLIDESONWALLS
		+NODROPOFF
		+NOBLOCKMONST
		+NOTELESTOMP
		+BLOCKASPLAYER
		+NOTRIGGER
		+SEEINVISIBLE
		+BOSSDEATH
		//+HDMOBBASE.HASHELMET
		+HDMOBBASE.NOBLURGAZE
		HDMobBase.DownedFrame 17;
		HDMobBase.MaxBloodLoss 400;
		Species 'HDFollower';
		HDFollower.ResurrectType RESF_BLUES | RESF_BLOOD;
	}
	
	States
	{
		Spawn:
			#### A 1;
			Goto Idle;

		Moving:
			#### CCCDDDEEEFFF 2;
			Loop;
		Idle:
			#### A 35 TryActivateLine();
			#### B 35;
			Loop;

		Pain:
		Pain.Melee:
			#### G 6
			{
				Status = FStatus_InactiveOrDead;
				A_GiveInventory("HDFireDouse", 20);
				A_StartSound(PainSound, CHAN_VOICE, CHANF_NOSTOP);
			}
			#### # 0
			{
				Status = FStatus_None;
			}
			Goto Idle;
		Pain.Staples:
			#### # 6
			{
				Status = FStatus_InactiveOrDead; 
				A_StartSound(PainSound, CHAN_VOICE, CHANF_NOSTOP);
			}
			#### # 0
			{
				Status = FStatus_None;
			}
			Goto Idle;

		Falldown:
			#### M 4
			{
				MaxStepHeight = 0; // [Ace] Prevents you from sombrero-ing the follower if you stand over them while they're incapped.
				Status = FStatus_InactiveOrDead;
				A_SetSize(-1, deathheight);
				A_StartSound(PainSound, CHAN_VOICE);
				ClearWeapon();
			}
			#### N 4 A_StartSound(DeathSound, CHAN_VOICE);
			#### O 4;
			#### PQ 4;
			#### Q 10
			{
				if (Stunned > 25 && Distance3D(LinkedPlayer) < radius + MaxReviveDistance && IsFacedByPlayer() && PlayerIsCrouching())
				{
					Stunned -= 40;
				}
				A_KnockedDown();
			}
			Wait;

		Standup:
			Goto Raise + 1; // [Ace] Don't reset body damage if standing up from incap.
		Raise:
			#### Q 0 OnRevive();
			#### QQP 6;
			#### O 6 A_Recoil(-0.3);
			#### N 6;
			#### M 6 Taunt();
			#### A 0
			{
				ThinkerIterator it = ThinkerIterator.Create("AngelFire", STAT_DEFAULT);
				AngelFire f;
				while((f = AngelFire(it.Next())))
				{
					if (f.master && f.master == self)
					{
						f.Destroy();
						break;
					}
				}

				MaxStepHeight = default.MaxStepHeight;
				Status = FStatus_None;
			}
			Goto Idle;

		Death:
			#### M 9
			{
				ClearGoal();
				ClearTarget();
				ClearWeapon();
				Status = FStatus_InactiveOrDead;
			}
			#### N 6 A_StartSound(DeathSound, CHAN_VOICE);
			#### O 5;
			#### PQR 4;
			Goto Dead;
		Dead:
			#### R 1 CanRaise CheckRevive();
			Wait;
	}
}

class LeftBehindFollower : Inventory abstract { Default { +INVENTORY.UNDROPPABLE } }