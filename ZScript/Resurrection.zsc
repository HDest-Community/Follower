extend class HDFollower
{
	enum ResurrectionFlags
	{
		RESF_BLUES = 1 << 0,
		RESF_BLOOD = 1 << 1,
		RESF_MERCHANT = 1 << 2,
		RESF_ALL = RESF_BLUES | RESF_BLOOD | RESF_MERCHANT
	}

	// --------------------------------------------------
	// VIRTUALS
	// --------------------------------------------------

	virtual clearscope int GetRequiredBlood()
	{
		return min(BloodReviveTicker / (35 * 4), 60);
	}

	virtual clearscope int GetRequiredSips()
	{
		return clamp(BodyDamage / 200, 2, 12);
	}

	// --------------------------------------------------
	// ACTIONS
	// --------------------------------------------------

	private void SpawnReviveParticles(color col, double progressMult)
	{
		progressMult = max(-0.3, 1.0 - progressMult);
		for (int i = 0; i < 3; ++i)
		{
			A_SpawnParticle(col, SPF_RELATIVE | SPF_FULLBRIGHT, random(15, 30), frandom(3, 5), random(0, 359),
				6 + Radius * 2 * progressMult, 0, frandom(0, Height),
				frandom(1.0, 4.0) * progressMult, max(0.2, 2.0 * progressMult), 0,
				frandom(-0.15, -0.05) * progressMult, 0, 0);
		}
	}

	protected void CheckRevive()
	{
		if (ResurrectType & RESF_BLUES && Blues > 0)
		{
			int req = 105 + GetRequiredSips() * 12;
			SpawnReviveParticles(0x2222FF, AbsorbedBlues / double(req));
			if (++AbsorbedBlues >= req && GetAge() % 35 == 0)
			{
				if (!A_RaiseSelf())
				{
					ThinkMessage(LinkedPlayer, "$REVIVE_NOROOM_PLR");
				}
				else
				{
					if (FindState('Raise.Blues', true))
					{
						SetStateLabel('Raise.Blues');
					}
					bFRIENDLY = true;
					PrintMessage(GetResponse("REVIVE_BLUES_SUCCESS"), "Revive/Blues/Success", PMType_Important);
				}
			}
		}
		else if (ResurrectType & RESF_BLOOD && LinkedPlayer.woundcount > 0)
		{
			int req = GetRequiredBlood();
			int realReq = min(105 + req * 8, 350);

			if (CanReach(MaxReviveDistance) == 0 && LinkedPlayer.woundcount > min(req, 40) && PlayerIsCrouching())
			{
				AbsorbedBlood++;
				SpawnReviveParticles(0xFF1111, AbsorbedBlood / double(max(1.0, realReq)));
			}
			else
			{
				BloodReviveTicker++;
			}

			if (AbsorbedBlood >= realReq && GetAge() % 70 == 0)
			{
				if (!A_RaiseSelf())
				{
					ThinkMessage(LinkedPlayer, "$REVIVE_NOROOM_PLR");
				}
				else
				{
					if (FindState('Raise.Blood', true))
					{
						SetStateLabel('Raise.Blood');
					}
					LinkedPlayer.AggravatedDamage += req;
					bFRIENDLY = true;
					PrintMessage(GetResponse("REVIVE_BLOOD_SUCCESS"), "Revive/Blood/Success", PMType_Important);
				}
			}
		}
		else if (ResurrectType & RESF_MERCHANT)
		{
			Name clsStr = 'HDMerchant';
			class<Actor> cls = clsStr;
			if (!cls)
			{
				return;
			}

			int count = CountProximity(cls, HDCONST_ONEMETRE * 2, CPXF_CLOSEST | CPXF_ANCESTOR);
			if (count > 0)
			{
				int req = 35 * 60 * 10;
				SpawnReviveParticles(0xFFFF44, MerchantReviveTicker / double(req));
				MerchantReviveTicker += count;
				if (MerchantReviveTicker >= req && GetAge() % 140 == 0)
				{
					if (!A_RaiseSelf())
					{
						ThinkMessage(LinkedPlayer, "$REVIVE_NOROOM_PLR");
					}
					else
					{
						if (FindState('Raise.Merchant', true))
						{
							SetStateLabel('Raise.Merchant');
						}
						bFRIENDLY = true;
						PrintMessage(GetResponse("REVIVE_MERCHANT_SUCCESS"), "Revive/Merchant/Success", PMType_Important);
					}
				}
			}
			else
			{
				MerchantReviveTicker = 0;
			}
		}
	}

	protected void OnRevive()
	{
		Bloodloss = 0;
		BodyDamage = 0; // [Ace] This is technically cheating, but otherwise the follower can get absolutely assblasted and become useless.
		Blues = 0;
		AbsorbedBlues = 0;
		AbsorbedBlood = 0;
		BloodReviveTicker = 0;
		MerchantReviveTicker = 0;
		OhanaTicker = 0;
	}

	bool TryRevive(int type)
	{
		if (DistanceToPlayer > radius + MaxReviveDistance)
		{
			ThinkMessage(LinkedPlayer, "$TOOFAR_PLR");
			return false;
		}

		switch (type)
		{
			case 0:
			{
				if (!(ResurrectType & RESF_BLUES))
				{
					return false;
				}

				if (Blues > 0)
				{
					ThinkMessage(LinkedPlayer, "$REVIVE_BLUES_ALREADYWORKING_PLR");
					return true;
				}

				let Potion = BluePotion(LinkedPlayer.FindInventory("BluePotion"));
				if (!Potion)
				{
					ThinkMessage(LinkedPlayer, "$REVIVE_BLUES_NONE_PLR");
					return true;
				}

				int req = GetRequiredSips();
				if (Potion.Mags[Potion.Mags.Size() - 1] < req)
				{
					ThinkMessage(LinkedPlayer, StringTable.Localize("$REVIVE_BLUES_NOTENOUGH_PLR1").." "..req.."/12 "..StringTable.Localize("$REVIVE_BLUES_NOTENOUGH_PLR2"));
					return false;
				}
				Potion.Mags[Potion.Mags.Size() - 1] -= req;
				if (Potion.Mags[Potion.Mags.Size() - 1] == 0)
				{
					Potion.TakeMag(false);
					Actor a = LinkedPlayer.Spawn("SpentBottle",LinkedPlayer.pos + (0, 0, LinkedPlayer.Height - 4), ALLOW_REPLACE);
					a.angle = LinkedPlayer.angle + 2;
					a.vel = LinkedPlayer.vel;
					a.A_ChangeVelocity(3, 1, 4, CVF_RELATIVE);

					a = LinkedPlayer.spawn("SpentCork", LinkedPlayer.pos + (0, 0, LinkedPlayer.height - 4), ALLOW_REPLACE);
					a.angle=LinkedPlayer.angle + 3;
					a.vel=LinkedPlayer.vel;
					a.A_ChangeVelocity(5, 3, 4, CVF_RELATIVE);
				}
				Blues = req * 12;
				break;
			}

			case 1:
			{
				if (!(ResurrectType & RESF_BLOOD))
				{
					return false;
				}

				LinkedPlayer.woundcount += ((GetRequiredBlood() - LinkedPlayer.woundcount) + 3) * (LinkedPlayer.CountInv('HDBlues') > 20 ? 2 : 1);
				break;
			}
		}

		return true;
	}

	// --------------------------------------------------
	// CONSTANTS/VARIABLES	
	// --------------------------------------------------

	const MaxReviveDistance = 24;

	private int Blues;
	private int AbsorbedBlues;

	private int AbsorbedBlood;
	int BloodReviveTicker;

	private int MerchantReviveTicker;

	private int ReviveMethod;

}