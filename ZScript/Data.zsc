class HDWeaponData play
{
	class<Inventory> ItemClass;
	int WeaponStatus[HDWEP_STATUSSLOTS];
}

class HDShieldData play
{
	class<HDMagicShield> ShieldClass;
	int Shields;
	int MaxShields;
	int Strength;
	bool RegenerateShields;
	bool NoShieldsDegeneration;
	int ReactionTime;
}

class FollowerData play
{
	class<HDFollower> FollowerClass;
	uint Index;
	uint Squad;

	string Tag;
	int Gender;
	string Sounds[3];
	int SpriteTranslation;

	int Health;

	// Bleeding thinker stuff.
	bool IsBleeding;
	int BleedPoints;
	int BleedRate;
	Actor Source;

	int BodyDamage;
	bool Incapped;
	int Bloodloss;
	int Stunned;
	int BloodReviveTicker;

	Array<FollowerWeapon> Weapons;
	InventorySlot Slots[HDFollower.SlotCount];

	int SuturesLeft;
	int Order;

	int ArmorDurability;
	bool ArmorMega;

	bool HasRadsuit;

	ItemStorage Storage;

	Array<HDWeaponData> WeaponData;
	Array<HDShieldData> ShieldData;
}

extend class HDFollower
{
	bool PackFollower(bool force = false)
	{
		if (LinkedPlayer.CountInv(DataClass) == GetDefaultByType(DataClass).MaxAmount)
		{
			ThinkMessage(LinkedPlayer, "$CARRY_TOOMANY_PLR");
			return false;
		}

		if (!force)
		{
			switch (CanReach(PlayerIsProne() && max(0, LinkedPlayer.pos.z - pos.z) > 0 ? height + HDCONST_ONEMETRE * 1.4 : radius + HDCONST_ONEMETRE * 0.75))
			{
				case 1: ThinkMessage(LinkedPlayer, "$TOOFAR_PLR"); return false;
				case 2: ThinkMessage(LinkedPlayer, "$NOTFACING_PLR"); return false;
			}

			PrintMessage(GetResponse("CARRY_SUCCESS"), "Carry/Success", PMType_General);
		}

		let Handler = FollowerHandler(EventHandler.Find("FollowerHandler"));
		Handler.Followers.Delete(Handler.Followers.Find(self));

		let data = new('FollowerData');
		LinkedPlayer.A_GiveInventory(DataClass);
		let FBody = FollowerBody(LinkedPlayer.FindInventory(DataClass));

		data.FollowerClass = GetClass();
		data.Index = Index;
		data.Squad = Squad;

		data.Tag = GetTag();
		data.Gender = Gender;
		data.Sounds[0] = SeeSound;
		data.Sounds[1] = PainSound;
		data.Sounds[2] = DeathSound;
		data.SpriteTranslation = self.Translation;

		for (int i = 0; i < Weapons.Size(); ++i)
		{
			data.Weapons.Push(Weapons[i]);
		}

		for (int i = 0; i < SlotCount; ++i)
		{
			data.Slots[i] = Slots[i];
		}

		if (!force)
		{
			data.Health = Health;
			data.Bloodloss = Bloodloss;
			data.Stunned = Stunned;
			data.BodyDamage = BodyDamage;
			data.BloodReviveTicker = BloodReviveTicker;
			data.Incapped = InStateSequence(CurState, FindState('Falldown'));

			HDBleedingWound BleedThinker = GetBleedThinker();
			if (BleedThinker)
			{
				data.IsBleeding = true;
				data.BleedPoints = BleedThinker.BleedPoints;
				data.BleedRate = BleedThinker.BleedRate;
				data.Source = BleedThinker.Source;
			}
		}
		else // [Ace] If it's forced, it means it's level end. In that case heal everything. This also only works if they're alive because you have to pick them up manually if they're dead.
		{
			FBody.NoExitDrop = true;
			data.Health = default.Health;
			data.Bloodloss = 0;
			data.Stunned = 0;
			data.BodyDamage = 0;
			data.Incapped = false;
		}

		data.SuturesLeft = SuturesLeft;
		data.Order = Order;

		let armor = HDArmourWorn(FindInventory("HDArmourWorn"));
		if (armor)
		{
			data.ArmorDurability = Armor.Durability;
			data.ArmorMega = Armor.Mega;
		}

		data.HasRadsuit = FindInventory('WornRadsuit') != null;

		let bpack = HDBackpack(FindInventory('HDBackpack'));
		if (bpack)
		{
			data.Storage = bpack.Storage;
		}

		for (Inventory next = Inv; next != null; next = Next.Inv)
		{
			if (next is 'HDWeapon' && next != bpack)
			{
				let wpn = HDWeapon(next);
				let wepData = new('HDWeaponData');
				wepData.ItemClass = next.GetClass();
				for (int i = 0; i < wpn.WeaponStatus.Size(); ++i)
				{
					wepData.WeaponStatus[i] = wpn.WeaponStatus[i];
				}
				Console.Printf(wpn.GetClassName());
				data.WeaponData.Push(wepData);
			}

			if (next is 'HDMagicShield')
			{
				let sld = HDMagicShield(next);
				let sldData = new('HDShieldData');
				sldData.ShieldClass = sld.GetClass();
				sldData.Shields = sld.Amount;
				sldData.MaxShields = sld.MaxAmount;
				sldData.Strength = sld.Stamina;
				sldData.RegenerateShields = sld.bQUICKTORETALIATE;
				sldData.NoShieldsDegeneration = sld.bSTANDSTILL;
				sldData.ReactionTime = sld.ReactionTime;
				data.ShieldData.Push(sldData);
			}
		}

		FBody.Data.Push(data);
		Destroy();
		return true;
	}

	// [Ace] These are still here because they don't get restored immediately.
	// Restoration happens in HDFollower::PostBeginPlay();
	int NewBloodloss;
	int NewStunned;
	int NewBodyDamage;
}

// [Ace] This is perhaps the only useful use of an inventory item.
// Can't use a variable in EventHandler because it gets reset on map start, and can't use a variable in StaticEventHandler because it's not saved to save games.
// Could use a static Thinker, but then the follower would be weightless.
class FollowerBody : HDPickup abstract
{
	override void DoEffect()
	{
		if (!owner)
		{
			Destroy();
			return;
		}
		
		let plr = HDPlayerPawn(owner);
		if (plr && plr.incapacitated > 0 && !NoExitDrop && !AlreadyTried)
		{
			FromIncap = true;
			plr.UseInventory(self);
		}
		Super.DoEffect();
	}

	override double GetBulk()
	{
		double total = 0;
		for (int i = 0; i < Data.Size(); ++i)
		{
			total += default.Bulk + (Data[i].Storage != null ? Data[i].Storage.TotalBulk * 0.7 : 0);
		}
		return total;
	}

	Array<FollowerData> Data;
	bool NoExitDrop; // [Ace] Don't drop if level is exited in incap.
	bool FromIncap;
	bool AlreadyTried;

	Default
	{
		-HDPICKUP.DROPTRANSLATION
		-HDPICKUP.FITSINBACKPACK
		+HDPICKUP.CHEATNOGIVE
		+HDPICKUP.NOTINPOCKETS
		+INVENTORY.INVBAR
		+INVENTORY.UNDROPPABLE
		HDPickup.Bulk 500;
		Inventory.MaxAmount 1;
	}

	States
	{
		Use:
			TNT1 A 0
			{
				FollowerData data = invoker.Data[invoker.Data.Size() - 1];

				bool ReturnValue = false;
				for (int i = 0; i < 100; ++i)
				{
					Actor a; bool success;

					int Distance = random(20, 48);
					int RandAngle = invoker.FromIncap || level.time < 2 ? random(0, 359) : 0;
					vector3 dest = Vec3Angle(Distance, angle + RandAngle);
					Sector sec = level.PointInSector(dest.xy);
					if (sec && pos.z - sec.NextLowestFloorAt(dest.x, dest.y, dest.z) > GetDefaultByType(data.FollowerClass).MaxStepHeight || !level.IsPointInLevel(dest))
					{
						if (invoker.FromIncap || level.time < 2)
						{
							continue;
						}
						else
						{
							break;
						}
					}

					[success, a] = A_SpawnItemEx(data.FollowerClass, Distance, 0, random(8, 16), angle: RandAngle);

					if (success)
					{
						let fol = HDFollower(a);
						fol.Index = data.Index;
						
						let Handler = FollowerHandler(EventHandler.Find("FollowerHandler"));
						Handler.InsertFollower(fol);

						fol.ChangeLinkedPlayer(HDPlayerPawn(self));

						fol.Squad = data.Squad;
						fol.SetTag(data.Tag);
						fol.Gender = data.Gender;
						fol.SeeSound = data.Sounds[0];
						fol.PainSound = data.Sounds[1];
						fol.DeathSound = data.Sounds[2];
						fol.Translation = data.SpriteTranslation;

						fol.Health = data.Health;
						fol.Order = data.Order;

						// [Ace] These aren't even transferred properly because the monsters' PostBeginPlay() calls ResetDamageCounters().
						// This is needed so that they are.
						fol.NewBloodloss = data.Bloodloss;
						fol.NewStunned = data.Stunned;
						fol.NewBodyDamage = data.BodyDamage;

						fol.Weapons.Move(data.Weapons);
						for (int j = 0; j < fol.Weapons.Size(); ++j)
						{
							fol.Weapons[j].Owner = fol;
						}
						for (int j = 0; j < HDFollower.SlotCount; ++j)
						{
							fol.Slots[j] = data.Slots[j];
						}
						
						fol.SuturesLeft = data.SuturesLeft;

						if (data.ArmorDurability > 0)
						{
							let armor = HDArmourWorn(fol.GiveInventoryType('HDArmourWorn'));
							armor.Durability = data.ArmorDurability;
							armor.Mega = data.ArmorMega;
						}

						if (data.HasRadsuit)
						{
							fol.GiveInventoryType('WornRadsuit');
							fol.GiveInventoryType('PortableRadsuit');
						}

						if (data.Storage != null)
						{
							let bpack = HDBackpack(fol.GiveInventoryType('HDBackpack'));
							bpack.Storage = data.Storage;
						}

						for (int j = 0; j < data.WeaponData.Size(); ++j)
						{
							let wpn = HDWeapon(fol.GiveInventoryType(data.WeaponData[j].ItemClass));
							for (int k = 0; k < wpn.WeaponStatus.Size(); ++k)
							{
								wpn.WeaponStatus[k] = data.WeaponData[j].WeaponStatus[k];
							}
						}

						for (int j = 0; j < data.ShieldData.Size(); ++j)
						{
							let sld = HDMagicShield(fol.GiveInventoryType(data.ShieldData[j].ShieldClass));
							sld.Amount = data.ShieldData[j].Shields;
							sld.MaxAmount = data.ShieldData[j].MaxShields;
							sld.Stamina = data.ShieldData[j].Strength;
							sld.bQUICKTORETALIATE = data.ShieldData[j].RegenerateShields;
							sld.bSTANDSTILL = data.ShieldData[j].NoShieldsDegeneration;
							sld.ReactionTime = data.ShieldData[j].ReactionTime;
						}

						if (data.IsBleeding)
						{
							HDBleedingWound.Inflict(fol, data.BleedPoints, data.BleedRate, false, data.Source);
						}

						if (data.Incapped)
						{
							fol.SetStateLabel('Falldown');
						}

						if (data.Health <= 0)
						{
							fol.bPUSHABLE = false;
							fol.DeathSound = "";
							fol.SetStateLabel('Death');
							fol.bCORPSE = true;
							fol.Status = FStatus_InactiveOrDead;
						}

						fol.BloodReviveTicker = data.BloodReviveTicker;

						invoker.Data.Pop();
						ReturnValue = true;
						break;
					}
				}

				if (!ReturnValue)
				{
					HDFollower.ThinkMessage(self, "$CARRY_CANTDROP_PLR");
					if (invoker.FromIncap)
					{
						invoker.AlreadyTried = true;
					}
				}
				
				return ReturnValue;
			}
			Stop;
	}
}