extend class HDFollower
{
	// --------------------------------------------------
	// ACTIONS
	// --------------------------------------------------

	protected void CheckOhana()
	{
		if (!OhanaMode) { OhanaMode = CVar.GetCVar('hdf_ohana'); }

		if (level.MapName ~== "LOTSAGUN")
		{
			return;
		}

		int merchantCount = 0;
		Name clsStr = 'HDMerchant';
		class<Actor> cls = clsStr;
		if (cls)
		{
			merchantCount = CountProximity(cls, HDCONST_ONEMETRE * 10, CPXF_ANCESTOR);
		}

		if (OhanaMode.GetBool() && DistanceToPlayer > HDCONST_ONEMETRE * (CanSeePlayer ? 30 : 10) && (merchantCount == 0 || GetAge() % (3 * merchantCount) == 0))
		{
			OhanaTicker++;

			int livingMonsters = max(0, level.total_monsters - level.killed_monsters);
			if (livingMonsters == 0)
			{
				if (OhanaTicker > 0)
				{
					OhanaTicker = 0;
				}
				return;
			}

			bool debug = hdf_debug & FDebug_Ohana;

			// https://www.desmos.com/calculator/djspjquvmc
			int deathReq = int(max(OhanaBaseTime / 30, OhanaBaseTime - (livingMonsters * 20) ** 1.23));
			int dissReq = int(max(OhanaBaseTime / 30, OhanaBaseTime - (livingMonsters * 80) ** 1.25));

			if (Health > 0 && OhanaTicker >= deathReq)
			{
				if (debug)
				{
					Console.Printf("[%s] The monsters got to %s.", GetTimestamp(), GetTag());
				}
				A_Die();
				BodyDamage = 10000;
				BloodReviveTicker = 10000;
			}
			else if (Health <= 0 && OhanaTicker >= dissReq)
			{
				if (debug)
				{
					Console.Printf("[%s] %s's corpse was eaten.", GetTimestamp(), GetTag());
				}
				Handler.RemoveFollower(self, true);
				return;
			}

			if (debug)
			{
				int timeLeft = (Health > 0 ? deathReq : dissReq) - OhanaTicker;
				int secs = Thinker.Tics2Seconds(timeLeft); 
				string timeStr = String.Format("%02d:%02d:%02d", secs / 3600, (secs % 3600) / 60, secs % 60);
				Console.Printf("[%s] %s is %s. %i monsters alive. Time left: %s. %i merchants are nearby.", GetTimestamp(), GetTag(), Health > 0 ? "alive" : "dead", livingMonsters, timeStr, merchantCount);
			}
		}
		else if (OhanaTicker > 0)
		{
			OhanaTicker = 0;
		}
	}

	// --------------------------------------------------
	// CONSTANTS/VARIABLES
	// --------------------------------------------------

	private transient CVar OhanaMode;
	private int OhanaTicker;
	const OhanaBaseTime = TICRATE * 60 * 30;
}