class FollowerHandler : EventHandler
{
	private transient ui HUDFont MainFont;

	private transient int FollowerMenuLevel;
	private transient bool CanExitNow;
	HDFollower Follower;

	private transient int WarningResetTimer;

	private void CreateFollower(int playerNum)
	{
		let plr = players[playerNum].mo;
		if (plr)
		{
			let Body = plr.FindInventory("FollowerBody");

			// [Ace] New map who dis? Spawn a new follower.
			if (!Body && !plr.CheckInventory("LeftBehindFollower", 1))
			{
				Actor a; bool success;
				[success, a] = plr.A_SpawnItemEx(Actor.GetReplacement("HDFollower"), random(16, 48), 0, random(0, 32), angle: random(0, 359), flags: SXF_NOCHECKPOSITION);
				if (success)
				{
					Follower = HDFollower(a);
					Follower.LinkedPlayer = HDPlayerPawn(plr);
					// [Ace] These are here so that they are only called once when the follower is created.
					Follower.GiveStartingItems();
					Follower.InitWeapons();
					break;
				}
			}
			else if (Body)
			{
				plr.UseInventory(Body);
			}
		}
	}

	override void PlayerEntered(PlayerEvent e)
	{
		if (e.PlayerNumber > 0 || gamestate == GS_TITLELEVEL)
		{
			return;
		}

		CreateFollower(e.PlayerNumber);
	}

	override void RenderOverlay(RenderEvent e)
	{
		MainFont = HUDFont.Create("CONFONT");

		int OriginalWidth = StatusBar.HorizontalResolution;
		int OriginalHeight = StatusBar.VerticalResolution;

		StatusBar.BeginHUD(1.0, true);
		StatusBar.SetSize(StatusBar.RelTop, 640, 480);

		if (Follower && FollowerMenuLevel > 0 && (Follower.Health > 0 && Follower.bFRIENDLY || Follower.Health <= 0) && !AutomapActive && GameState == GS_LEVEL)
		{
			DrawCommandMenu(StatusBar, (0, 40), StatusBar.DI_SCREEN_LEFT | StatusBar.DI_SCREEN_VCENTER | StatusBar.DI_TEXT_ALIGN_LEFT);
		}

		// --------------- PRETEND WE WERE NEVER HERE ---------------

		StatusBar.BeginHUD(1.0, false);
		StatusBar.SetSize(StatusBar.RelTop, OriginalWidth, OriginalHeight);
	}

	private ui void DrawCommandMenu(BaseStatusBar sb, vector2 pos, int flags)
	{
		vector2 OriginalPos = pos;
		int RectangleHeight = MainFont.mFont.GetHeight() + 4;
		int Spacing = 1;

		int Brass = Follower.GetTotalBrass();
		int MaxBrass = Follower.GetMaxBrass();
		string BrassString = (Brass > 0 ? "" : "\c[Red]").."Collect brass\c- ".."("..Brass.."/"..MaxBrass..")";

		switch (FollowerMenuLevel)
		{
			case 1:
				if (Follower.Health <= 0)
				{
					string Commands[] =
					{
						"1) Carry follower",
						"2) "..(sb.CheckInventory("BluePotion", 1) ? "" : "\c[Red]").."Give blue potion\c-",
						"3) Try to give blood \c[FLW_BloodRed](+10 wounds)\c-",
						"4) "..BrassString
					};

					for (int i = 0; i < Commands.Size(); ++i)
					{
						DrawCommandRectangle(sb, pos, (270, RectangleHeight), MainFont, Commands[i], flags);
						pos.y += RectangleHeight + Spacing;
					}
				}
				else if (Follower.bFRIENDLY)
				{
					int Durability = 0;
					bool Mega = false;
					let Armor = HDArmourWorn(Follower.FindInventory("HDArmourWorn"));
					if (Armor)
					{
						Durability = Armor.Durability;
						Mega = Armor.Mega;
					}

					string Commands[] =
					{
						"1) Orders",
						"2) Carry follower",
						"3) Give ammo",
						"4) Give supplies",
						"5) Try/drop armor"..(Durability > 0 ? (Mega ? "\c[Blue]" : "\c[DarkGreen]").." ("..Durability..")": "").."\c-",
						"6) Misc commands"
					};

					for (int i = 0; i < Commands.Size(); ++i)
					{
						DrawCommandRectangle(sb, pos, (Durability > 0 ? 190 : 150, RectangleHeight), MainFont, Commands[i], flags);
						pos.y += RectangleHeight + Spacing;
					}
				}
				break;

			case 2:
				static const string Orders[] = { "Follow", "Follow and ignore hostiles", "Stay and provide cover", "Go there and provide cover", "Come and help me" };
				for (int i = 0; i < Orders.Size(); ++i)
				{
					DrawCommandRectangle(sb, pos, (240, RectangleHeight), MainFont, (i + 1)..") "..(Follower.Order == i ? "\c[Green]" : "")..Orders[i].."\c-", flags);
					pos.y += RectangleHeight + Spacing;
				}
				DrawCommandRectangle(sb, pos, (240, RectangleHeight), MainFont, (Orders.Size() + 1)..") Back...", flags);
				break;

			case 3:
				int WeaponSize = Follower.Weapons.Size();
				int WeaponBlockSize = RectangleHeight * 3 - 5;
				if (WeaponSize > 4)
				{
					pos.y -= WeaponBlockSize * (WeaponSize - 4);
				}
				for (int i = 0; i < WeaponSize; ++i)
				{
					DrawWeaponRectangle(sb, pos, (160, WeaponBlockSize), MainFont, i + 1, Follower.GetWeaponByIndex(i), flags);
					pos.y += WeaponBlockSize + Spacing;
				}
				DrawCommandRectangle(sb, pos, (160, RectangleHeight), MainFont, (WeaponSize + 1)..") Back...", flags);
				break;

			case 4:
				DrawCommandRectangle(sb, pos, (200, RectangleHeight), MainFont, "1) "..(sb.CheckInventory("PortableMedikit") ? "" : "\c[Red]").."Give Medikit\c- ".."("..Follower.SuturesLeft..", "..Follower.Medikits.."/"..Follower.MaxMedikits..")", flags); pos.y += RectangleHeight + Spacing;
				DrawCommandRectangle(sb, pos, (200, RectangleHeight), MainFont, "2) "..(sb.CheckInventory("PortableStimpack") ? "" : "\c[Red]").."Give Stimpack\c- ".."("..Follower.Stimpacks.."/"..Follower.MaxStimpacks..")", flags); pos.y += RectangleHeight + Spacing;
				DrawCommandRectangle(sb, pos, (200, RectangleHeight), MainFont, "3) Back...", flags);
				break;

			case 5:
				DrawCommandRectangle(sb, pos, (210, RectangleHeight), MainFont, "1) Report position", flags); pos.y += RectangleHeight + Spacing;
				DrawCommandRectangle(sb, pos, (210, RectangleHeight), MainFont, "2) "..BrassString, flags); pos.y += RectangleHeight + Spacing;
				DrawCommandRectangle(sb, pos, (210, RectangleHeight), MainFont, "3) Back...", flags);
				break;
		}
	}

	private ui void DrawCommandRectangle(BaseStatusBar sb, vector2 pos, vector2 size, HUDFont fnt, string command, int flags)
	{
		sb.Fill(Color(64, 128, 192, 255), pos.x, pos.y, size.x, size.y, flags);
		sb.Fill(Color(128, 0, 0, 0), pos.x + 1, pos.y + 1, size.x - 2, size.y - 2, flags);
		sb.DrawString(fnt, command, (pos.x + 2, pos.y + (size.y - fnt.mFont.GetHeight()) / 2), flags, Font.CR_WHITE); 
	}

	private ui void DrawWeaponRectangle(BaseStatusBar sb, vector2 pos, vector2 size, HUDFont fnt, int index, FollowerWeapon wpn, int flags)
	{
		sb.Fill(Color(64, 128, 192, 255), pos.x, pos.y, size.x, size.y, flags);
		sb.Fill(Color(128, 0, 0, 0), pos.x + 1, pos.y + 1, size.x - 2, size.y - 2, flags);

		pos += (2, 2);
		int FontHeight = fnt.mFont.GetHeight();
		sb.DrawString(fnt, index..") "..wpn.GetName(), pos, flags, Font.FindFontColor("FLW_WeaponBlue")); pos.y += FontHeight + 1;
		sb.DrawString(fnt, wpn.GetLoadedRounds()..", "..wpn.SpareAmmo.."/"..wpn.GetMaxSpare(), pos, flags, Font.CR_WHITE); pos.y += FontHeight + 1;

		int MaxGiveAmount = Follower.GetMaxGiveAmount(wpn);
		string AmmoString = (MaxGiveAmount > 0 ? "\c[Green]" : "\c[Red]").."+"..MaxGiveAmount.." "..wpn.GetAmmoName().."\c-";
		sb.DrawString(fnt, AmmoString, pos, flags, Font.CR_WHITE);
	}

	override bool InputProcess(InputEvent e)
	{
		if (Follower && FollowerMenuLevel > 0 && (Follower.Health > 0 && Follower.bFRIENDLY || Follower.Health <= 0) && e.Type == InputEvent.Type_KeyDown)
		{
			int NumKey = e.KeyChar - 48;
			Name Key = String.Format("%c", e.KeyChar);
			switch (FollowerMenuLevel)
			{
				case 1:
					if (Follower.Health <= 0)
					{
						switch (Key)
						{
							case '1': SendNetworkEvent("HDF_CarryFollower"); break;
							case '2': SendNetworkEvent("HDF_TryRevive", RType_Blues); break;
							case '3': SendNetworkEvent("HDF_TryRevive", RType_Blood); break;
							case '4': SendNetworkEvent("HDF_CollectBrass"); break;
						}
					}
					else if (Follower.bFRIENDLY)
					{
						switch (Key)
						{
							case '1': SendNetworkEvent("HDF_SetFollowerMenu", 2); break;
							case '2': SendNetworkEvent("HDF_CarryFollower"); break;
							case '3': SendNetworkEvent("HDF_SetFollowerMenu", 3); break;
							case '4': SendNetworkEvent("HDF_SetFollowerMenu", 4); break;
							case '5': SendNetworkEvent("HDF_TryArmor"); break;
							case '6': SendNetworkEvent("HDF_SetFollowerMenu", 5); break;
						}
					}
					break;
					
				case 2:
					switch (Key)
					{
						case '1': SendNetworkEvent("HDF_ChangeOrders", FOrder_Follow); break;
						case '2': SendNetworkEvent("HDF_ChangeOrders", FOrder_FollowIgnore); break;
						case '3': SendNetworkEvent("HDF_ChangeOrders", FOrder_Cover); break;
						case '4': SendNetworkEvent("HDF_ChangeOrders", FOrder_GoAndCover); break;
						case '5': SendNetworkEvent("HDF_ChangeOrders", FOrder_ComeAndHelp); break;
						case '6': SendNetworkEvent("HDF_SetFollowerMenu", 1); break;
					}
					break;

				case 3:
					if (NumKey == Follower.Weapons.Size() + 1)
					{
						SendNetworkEvent("HDF_SetFollowerMenu", 1);
					}
					else
					{
						SendNetworkEvent("HDF_GiveAmmo", NumKey - 1);
					}
					break;

				case 4:
					switch (Key)
					{
						case '1': SendNetworkEvent("HDF_GiveSupplies", 0); break;
						case '2': SendNetworkEvent("HDF_GiveSupplies", 1); break;
						case '3': SendNetworkEvent("HDF_SetFollowerMenu", 1); break;
					}
					break;

				case 5:
					switch (Key)
					{
						case '1': SendNetworkEvent("HDF_ReportPosition"); break;
						case '2': SendNetworkEvent("HDF_CollectBrass"); break;
						case '3': SendNetworkEvent("HDF_SetFollowerMenu", 1); break;
					}
					break;
			}

			// [Ace] Block 0-9 keys from affecting the world.
			if (e.KeyChar >= 48 && e.KeyChar <= 57)
			{
				return true;
			}

			// [Ace] Exit.
			int Key1, Key2;
			[Key1, Key2] = Bindings.GetKeysForCommand("HDF_OpenMenu");
			if (e.KeyScan == Key1 || e.KeyScan == Key2)
			{
				SendNetworkEvent("HDF_SetFollowerMenu", 0);
				return true;
			}
		}
		return false;
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name ~== "HDF_ResetFollower")
		{
			// [Ace] This allows you to use the follower after big refactors without having to start a new game. This will re-create the actor object.
			// Or create an entirely new one, as long as you didn't actually leave them behind.
			if (Follower)
			{
				Follower.Destroy();
			}
			CreateFollower(e.Player);
			return;
		}

		if (!Follower)
		{
			return;
		}

		// [Ace] These commands can be activated through the console and don't require the follower to be alive.
		if (e.Name ~== "HDF_SetFollowerMenu")
		{
			FollowerMenuLevel = e.Args[0];
			return;
		}

		if (e.Name ~== "HDF_WarpToPlayer")
		{
			// [Ace] This is an obvious cheat, so don't use it unless you absolutely HAVE to.
			Follower.WarpToPlayer();
			return;
		}

		if (Follower.Health > 0 && !Follower.bFRIENDLY)
		{
			return;
		}

		// [Ace] These commands cannot be used if alive and hostile.
		if (e.Name ~== "HDF_CarryFollower")
		{
			if (Follower.PackFollower())
			{
				FollowerMenuLevel = 0;
			}
			return;
		}

		if (e.Name ~== "HDF_TryRevive")
		{
			if (Follower.TryRevive(e.Args[0]))
			{
				FollowerMenuLevel = 0;
			}
			return;
		}

		if (e.Name ~== "HDF_CollectBrass")
		{
			if (Follower.TryCollectBrass())
			{
				FollowerMenuLevel = 0;
			}
			return;
		}

		if (e.Name ~== "HDF_NextOutfit")
		{
			Follower.NextOutfit();
			return;
		}

		if (e.Name ~== "HDF_GiveAmmo")
		{
			Follower.TryGiveAmmo(e.Args[0]);
			return;
		}

		if (e.Name ~== "HDF_TryArmor")
		{
			Follower.TryUseArmor();
			FollowerMenuLevel = 0;
			return;
		}

		if (e.Name ~== "HDF_GiveSupplies")
		{
			switch (e.Args[0])
			{
				case 0: Follower.TryGiveMedikit(); break;
				case 1: Follower.TryGiveStimpack(); break;
			}
			return;
		}

		if (e.Name ~== "HDF_ChangeOrders")
		{
			if (Follower.ChangeOrders(e.Args[0]))
			{
				FollowerMenuLevel = 0;
			}
			return;
		}

		if (e.Name ~== "HDF_ReportPosition")
		{
			Follower.ReportPosition();
			FollowerMenuLevel = 0;
			return;
		}
	}

	override void WorldUnloaded(WorldEvent e)
	{
		if (Follower)
		{
			if (Follower.IsDeadOrMissing())
			{
				Follower.LinkedPlayer.A_GiveInventory("LeftBehindFollower");
			}
			else
			{
				Follower.PackFollower(true);
			}
		}
	}

	override void WorldLinePreActivated(WorldEvent e)
	{
		// [Ace] This only prints the warning. Tokens are given when you actually exit the level.
		if (e.Thing is "PlayerPawn" && (e.ActivatedLine.special == 74 || e.ActivatedLine.special == 243 || e.ActivatedLine.special == 244))
		{
			if (Follower && Follower.IsDeadOrMissing() && !CanExitNow)
			{
				e.Thing.A_Print("\c[White]You shouldn't leave "..Follower.GetTag().." behind.\c-\n\n\c[White]Activate the exit again within two seconds to exit the level and leave "..Follower.GetTag().." to the monsters.\c-");
				e.ShouldActivate = false;
				CanExitNow = true;
				WarningResetTimer = 70;
			}
		}
	}

	override void WorldTick()
	{
		if (CanExitNow && --WarningResetTimer <= 0)
		{
			CanExitNow = false;
		}
	}
}