class FollowerHandler : EventHandler
{
	// ----------------------------------------------------------
	// CORE
	// ----------------------------------------------------------

	private transient int FollowerMenuLevel[MAXPLAYERS];
	private transient HDMarine SelMarine[MAXPLAYERS];
	private transient HDFollower SelFollower[MAXPLAYERS];
	private transient Array<FollowerBody> FollowersInInv;

	private transient bool CanExitNow;
	private transient int WarningResetTimer;

	override void PlayerEntered(PlayerEvent e)
	{
		let plr = players[e.PlayerNumber].mo;
		if (plr)
		{
			Inventory Next = plr.Inv;
			while (Next)
			{
				if (Next is 'FollowerBody')
				{
					FollowersInInv.Push(FollowerBody(Next));
				}
				Next = Next.Inv;
			}
		}
	}

	override void WorldLoaded(WorldEvent e)
	{
		if (GameState == GS_TITLELEVEL)
		{
			return;
		}

		let Arbitrator = players[Net_Arbitrator].mo;
		if (!Arbitrator)
		{
			return;
		}

		Array<class<HDFollower> > FollowerClasses;
		for (int i = 0; i < AllActorClasses.Size(); ++i)
		{
			if (AllActorClasses[i] is 'HDFollower' && AllActorClasses[i].GetClassName() != 'HDFollower')
			{
				FollowerClasses.Push((class<HDFollower>)(AllActorClasses[i]));
			}
		}

		int FollowerSpawns = hdf_followers;
		for (int i = 0; i < FollowerClasses.Size(); ++i)
		{
			// [Ace] FollowerSpawns only affects built-in followers.
			if (FollowerSpawns & (1 << i) || i > InternalFollowers - 1)
			{
				int Index = -1;
				for (int j = 0; j < FollowersInInv.Size(); ++j)
				{
					if (FollowersInInv[j].Data[FollowersInInv[j].Data.Size() - 1].FollowerClass == FollowerClasses[i])
					{
						Index = j;
						break;
					}
				}
				
				// [Ace] Only attempt to spawn a follower if they haven't been picked up by any of the other players.
				if (Index == -1)
				{
					if (GetDefaultByType(FollowerClasses[i]).MissingClass)
					{
						CreateFollower(FollowerClasses[i], Net_Arbitrator);
					}
				}
				else if (CVar.GetCVar('hdf_droponstart', FollowersInInv[Index].owner.player).GetBool())
				{
					for (int j = 0; j < 50 && FollowersInInv[Index]; ++j)
					{
						FollowersInInv[Index].owner.UseInventory(FollowersInInv[Index]);
					}
					FollowersInInv.Delete(Index);
				}
			}
		}
	}

	override void WorldUnloaded(WorldEvent e)
	{
		while (Followers.Size() > 0)
		{
			HDFollower flw = Followers[0];
			if (flw.IsDeadOrMissing())
			{
				RemoveFollower(flw, true);
			}
			else
			{
				flw.PackFollower(true);
			}
		}
	}

	override void WorldLinePreActivated(WorldEvent e)
	{
		// [Ace] This only prints the warning. Tokens are given when you actually exit the level.
		if (e.Thing is "PlayerPawn" && (e.ActivatedLine.special == 74 || e.ActivatedLine.special == 243 || e.ActivatedLine.special == 244) && !CanExitNow)
		{
			Array<HDFollower> MissingFollowers;
			for (int i = 0; i < Followers.Size(); ++i)
			{
				// [Ace] Ignore expendable followers.
				if (Followers[i].IsDeadOrMissing() && Followers[i].MissingClass)
				{
					MissingFollowers.Push(Followers[i]);
				}
			}
			
			int MSize = MissingFollowers.Size();
			if (MSize > 0)
			{
				// [Ace] Gotta have that proper grammar.
				string FNames = "";
				for (int i = 0; i < MSize; ++i)
				{
					FNames = FNames..MissingFollowers[i].GetTag();

					if (i + 2 == MSize)
					{
						FNames = FNames..(MSize > 2 ? "," : "").." and ";
					}
					else if (i + 2 < MSize)
					{
						FNames = FNames..", ";
					}
				}

				e.Thing.A_Print("\c[White]You shouldn't leave "..FNames.." behind.\c-\n\n\c[White]Activate the exit again within two seconds to exit the level and leave "..(MSize > 1 ? "them" : MissingFollowers[0].GetPronoun(false)).." to the monsters.\c-", 4);
				e.ShouldActivate = false;
				CanExitNow = true;
				WarningResetTimer = 70;
			}	
		}
	}

	override void WorldTick()
	{
		if (CanExitNow && --WarningResetTimer <= 0)
		{
			CanExitNow = false;
		}
	}

	// ----------------------------------------------------------
	// INFORMATION
	// ----------------------------------------------------------

	int FollowingFollowersCount()
	{
		int Total = 0;
		for (int i = 0; i < Followers.Size(); ++i)
		{
			if (Followers[i].Health > 0 && (Followers[i].Order == FOrder_Follow || Followers[i].Order == FOrder_FollowIgnore))
			{
				Total++;
			}
		}
		return Total;
	}
}