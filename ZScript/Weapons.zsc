class FollowerWeapon
{
	enum CRType
	{
		CRT_Empty,
		CRT_Chambered,
		CRT_Spent
	}

	Name WeaponName; // [Ace] Used for identification. Also for the sounds and stuff.
	class<HDAmmo> AmmoType;
	string AmmoName; // [Ace] Fancy name.
	StateLabel FireState, ReloadState;
	int Mag, MaxMag;
	int SpareAmmo, MaxSpareAmmo;
	CRType ChamberedRound;
	bool HasWarnedLowAmmo;

	static FollowerWeapon Create(Name wName, class<HDAmmo> amType, string amName, int sMag, int mMag, int sSpare, int mSpare, StateLabel fState, StateLabel rState, CRType chamber)
	{
		FollowerWeapon wpn = new("FollowerWeapon");
		wpn.WeaponName = wName;
		wpn.AmmoType = amType;
		wpn.AmmoName = amName;
		wpn.Mag = sMag;
		wpn.MaxMag = mMag;
		wpn.SpareAmmo = sSpare;
		wpn.MaxSpareAmmo = mSpare;
		wpn.ChamberedRound = chamber;
		wpn.FireState = fState;
		wpn.ReloadState = rState;
		wpn.HasWarnedLowAmmo = false;

		return wpn;
	}

	void ReloadWeapon()
	{
		int AmmoMissing = MaxMag - Mag;
		int AmmoToLoad = min(AmmoMissing, SpareAmmo);
		SpareAmmo -= AmmoToLoad;
		Mag += AmmoToLoad;
	}
}

extend class HDFollower
{
	private int AdjustForDistance(double distance, double mult = 1.0) const
	{
		return int(clamp((distance / 64.0) * mult, 4, 80));
	}

	clearscope int GetMaxGiveAmount(FollowerWeapon wpn)
	{
		return min(LinkedPlayer.CountInv(wpn.AmmoType), min(wpn.MaxMag, wpn.MaxSpareAmmo - wpn.SpareAmmo));
	}

	private void Aim()
	{
		A_Face(CTarget, 0, 0, flags: FAF_MIDDLE);
		
		// [Ace] If you're incapped, follower can probably shoot over you. Otherwise it's not a good idea.
		Actor ATarget = AimTarget();
		if (ATarget && bFRIENDLY && (ATarget is "PlayerPawn" || ATarget.bFRIENDLY))
		{
			AimTimer = 0;
			SetStateLabel("Aiming");
		}
	}

	clearscope FollowerWeapon GetWeaponByName(Name wpnName)
	{
		for (int i = 0; i < Weapons.Size(); ++i)
		{
			if (Weapons[i].WeaponName == wpnName)
			{
				return Weapons[i];
			}
		}

		return null;
	}

	clearscope FollowerWeapon GetWeaponByIndex(int index)
	{
		int Size = Weapons.Size();
		if (index > -1 && Size > 0 && index < Size)
		{
			return Weapons[index];
		}

		return null;
	}

	// [Ace] It's an int because it's used in NetworkProcess.
	void TryGiveAmmo(int wpnIndex)
	{
		FollowerWeapon wpn = GetWeaponByIndex(wpnIndex);
		if (Status == FStatus_InactiveOrDead || !wpn)
		{
			return;
		}

		SelWeapon = wpn;
		class<Inventory> AmmoType = wpn.AmmoType;
		int MaxGive = GetMaxGiveAmount(wpn);

		if (Distance3D(LinkedPlayer) > radius + MaxInventoryDistance)
		{
			TryReload(wpn, wpn.MaxMag);
			ThinkMessage(LinkedPlayer, "$AMMOGIVE_FAR_PLR");
			return;
		}
		else if (wpn.SpareAmmo >= wpn.MaxSpareAmmo)
		{
			TryReload(wpn, wpn.MaxMag);
			PrintMessage(GetResponse("$AMMOGIVE_"..wpn.WeaponName.."_TOOMANY"), "Follower/AmmoGive/"..wpn.WeaponName.."/TooMany");
			return;
		}
		else if (LinkedPlayer.CountInv(wpn.AmmoType) == 0)
		{
			TryReload(wpn, wpn.MaxMag);
			ThinkMessage(LinkedPlayer, "$AMMOGIVE_NOTENOUGH_PLR");
			return;
		}

		LinkedPlayer.A_TakeInventory(AmmoType, MaxGive);
		wpn.SpareAmmo += MaxGive;
		wpn.HasWarnedLowAmmo = false;
		TryReload(wpn, wpn.MaxMag);

		PrintMessage(GetResponse("$AMMOGIVE_"..wpn.WeaponName.."_SUCCESS"), "Follower/AmmoGive/"..wpn.WeaponName.."/Success");
	}

	// [Ace] If weapon is out of ammo, reload.
	private void TryReload(FollowerWeapon wpn, int min = 0, bool force = false, bool silent = false, bool noJump = false)
	{
		if (IsInCombatStates() && !force)
		{
			return;
		}

		if (wpn.Mag <= 0 || wpn.Mag < min)
		{
			if (wpn.SpareAmmo > 0)
			{
				SetStateLabel(wpn.ReloadState);
			}
			else
			{
				if (!silent && !wpn.HasWarnedLowAmmo)
				{
					wpn.HasWarnedLowAmmo = true;
					PrintMessage(GetResponse("$NOAMMO_"..wpn.WeaponName), "Follower/NoAmmo/"..wpn.WeaponName);
				}

				if (!noJump)
				{
					SetStateLabel("Idle");
				}
			}
		}
	}

	protected void EngageTarget(Array<FollowerWeapon> wpns, Actor other)
	{
		FollowerWeapon HighestWithSpare = null;
		FollowerWeapon HighestWithAmmo = null;
		SelWeapon = null;

		// [Ace] Find a weapon that has ammo in it. Start from the end and work backwards.
		for (int i = wpns.Size() - 1; i >= 0; --i)
		{
			if (wpns[i].SpareAmmo > 0)
			{
				HighestWithSpare = wpns[i];
			}
			if (wpns[i].Mag > 0)
			{
				HighestWithAmmo = wpns[i];
			}
		}

		if (HighestWithAmmo)
		{
			SelWeapon = HighestWithAmmo;
		}
		else if (HighestWithSpare)
		{
			SelWeapon = HighestWithSpare;
			TryReload(SelWeapon, 0, false, true, true);
			return;
		}
		
		if (SelWeapon && other)
		{
			CTarget = other;
			SetStateLabel("See");
		}
	}

	protected virtual bool IsInCombatStates()
	{
		// [Ace] Well, that's one way to do it.
		static const StateLabel CombatStates[] =
		{
			"See", "Aiming",
			"ShootZM", "ReloadZM",
			"ShootBoss", "ChamberRound", "ReloadBoss", "ReloadBossLoop",
			"ShootBronto", "ReloadBronto"
		};

		for (int i = 0; i < CombatStates.Size(); ++i)
		{
			if (InStateSequence(CurState, FindState(CombatStates[i])))
			{
				return true;
			}
		}

		return false;
	}

	virtual void InitWeapons()
	{
		Weapons.Push(FollowerWeapon.Create("ZM66", "FourMilAmmo", "4mm Rounds", 50, 50, 0, 250, "ShootZM", "ReloadZM", FollowerWeapon.CRT_Chambered));
		Weapons.Push(FollowerWeapon.Create("Boss", "SevenMilAmmo", "7mm Rounds", 0, 10, 0, 50, "ShootBoss", "ReloadBoss", FollowerWeapon.CRT_Empty));
		Weapons.Push(FollowerWeapon.Create("Bronto", "BrontornisRound", "Brontornis Bolt", 0, 1, 0, 5, "ShootBronto", "ReloadBronto", FollowerWeapon.CRT_Empty));
	}

	protected FollowerWeapon SelWeapon;
	Array<FollowerWeapon> Weapons;

	private int AimTimer;
	
	States
	{
		See:
			#### FF 2
			{
				AimTimer = 0;
			}
		Aiming:
			#### F 1; // [Ace] Otherwise it's gonna cause an infinite loop.
			#### F 1
			{
				if (!CheckTarget())
				{
					SetStateLabel("Idle");
					return;
				}

				Aim();
				if (AimTimer++ > AdjustForDistance(Distance3D(CTarget), SelWeapon.WeaponName == "Boss" ? 0.5 : 1))
				{
					AimTimer = 0;
					SetStateLabel("Shoot");
				}
			}
			Loop;
		Shoot:
			#### F 0
			{
				if (SelWeapon)
				{
					SetStateLabel(SelWeapon.FireState);
					return;
				}

				// [Ace] Follower is out of ammo and should not (re)engage enemies.
				// Clear target so that they don't get stuck idling.
				ClearTarget();
			}
			Goto Idle;

		// ----------------------------------------
		// ZM66
		// ----------------------------------------

		ShootZM:
			#### GGG 1
			{
				A_StartSound("weapons/rifle", CHAN_WEAPON);
				HDBulletActor.FireBullet(self, "HDB_426");
				A_AlertMonsters(flags: AMF_TARGETEMITTER);
				SelWeapon.Mag--;

				TryReload(SelWeapon, force: true);
			}
			#### F 10;
			Goto See;
		ReloadZM:
			#### F 8
			{
				bNOPAIN = true;
			}
			#### F 6
			{
				A_StartSound("weapons/rifleclick2");
			}
			#### F 0
			{
				A_StartSound("weapons/rifleload");
				HDMagAmmo.SpawnMag(self,"HD4mMag", 0);
			}
			#### F 30 A_StartSound("weapons/pocket", 8);
			#### F 10
			{
				A_StartSound("weapons/rifleload", 9);
				SelWeapon.ReloadWeapon();
			}
			#### F 2 A_StartSound("weapons/rifleclick2", 8);
			#### F 0
			{
				bNOPAIN = false;
			}
			Goto See;

		// ----------------------------------------
		// BOSS RIFLE
		// ----------------------------------------

		ShootBoss:
			#### F 0
			{
				if (!CheckTarget())
				{
					SetStateLabel("See");
					return;
				}
			}
			#### F 4 Aim();
			#### G 1
			{
				A_StartSound("weapons/bigrifle2", CHAN_WEAPON);
				HDBulletActor.FireBullet(self, "HDB_776", speedfactor: 0.99);
				SelWeapon.ChamberedRound = FollowerWeapon.CRT_Spent;
				A_AlertMonsters(flags: AMF_TARGETEMITTER);
				SelWeapon.Mag--;

				TryReload(SelWeapon, force: true);
			}
			#### F 5;
		ChamberRound:
			#### F 0
			{
				bNOPAIN = true;
			}
			#### F 5 A_StartSound("weapons/boltback", 8);
			#### F 0
			{
				if (SelWeapon.ChamberedRound == FollowerWeapon.CRT_Spent)
				{
					A_SpawnItemEx("HDSpent7mm", cos(pitch) * 8, 1, height - 7 - sin(pitch) * 8, cos(pitch) * cos(angle - 80) * 6 + vel.x, cos(pitch) * sin(angle - 80) * 6 + vel.y, -sin(pitch) * 6+ vel.z, 0, SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH);
				}
				SelWeapon.ChamberedRound = SelWeapon.Mag > 0 ? FollowerWeapon.CRT_Chambered : FollowerWeapon.CRT_Empty;
			}
			#### F 7 A_StartSound("weapons/boltfwd", 8);
			#### F 0
			{
				bNOPAIN = false;
			}
			Goto ShootBoss;
		ReloadBoss:
			#### F 8
			{
				bNOPAIN = true;
			}
			#### F 2 A_StartSound("weapons/rifleclick2", 8, CHANF_OVERLAP, 0.9, pitch: 0.95);
			#### F 4 A_StartSound("weapons/rifleload", 8, CHANF_OVERLAP);
			#### F 20 A_StartSound("weapons/pocket", 8);
		ReloadBossLoop:
			#### F 0
			{
				if (SelWeapon.Mag == 10 || SelWeapon.SpareAmmo == 0)
				{
					if (SelWeapon.ChamberedRound == FollowerWeapon.CRT_Chambered)
					{
						SetStateLabel("See");
					}
					else
					{
						SetStateLabel("ChamberRound");
					}
					bNOPAIN = false;
				}
			}
			#### F 12
			{
				A_StartSound("weapons/rifleclick2",8);
				SelWeapon.SpareAmmo--;
				SelWeapon.Mag++;
			}
			Loop;

		// ----------------------------------------
		// BRONTORNIS
		// ----------------------------------------

		ShootBronto:
			#### G 1
			{
				A_StartSound("weapons/bronto",CHAN_WEAPON);
				A_StartSound("weapons/bronto",CHAN_WEAPON, CHANF_OVERLAP);
				A_StartSound("weapons/bronto2",CHAN_WEAPON, CHANF_OVERLAP);
				HDBulletActor.FireBullet(self, "HDB_bronto");
				SelWeapon.ChamberedRound= FollowerWeapon.CRT_Spent;
				SelWeapon.Mag--;
				A_AlertMonsters(flags: AMF_TARGETEMITTER);
				A_Recoil(6);

				TryReload(SelWeapon, force: true);
			}
			#### F 10;
			Goto See;
		ReloadBronto:
			#### F 8
			{
				bNOPAIN = true;
			}
			#### F 5
			{
				A_StartSound("weapons/brontunload", 8);
				if (SelWeapon.ChamberedRound == FollowerWeapon.CRT_Spent)
				{
					A_SpawnItemEx("TerrorCasing", cos(pitch) * 4, 0, height - 10 - sin(pitch) * 4, vel.x, vel.y, vel.z - frandom(-1, 1), frandom(-1, 1), SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH | SXF_TRANSFERTRANSLATION);
				}
			}
			#### F 12
			{
				SelWeapon.ChamberedRound = FollowerWeapon.CRT_Chambered;
				A_StartSound("weapons/brontoload", 9);
				SelWeapon.Mag = 1;
				SelWeapon.SpareAmmo--;
			}
			#### F 12 A_StartSound("weapons/pocket", 10);
			#### F 10 A_StartSound("weapons/brontoload", 10);
			#### F 10 A_StartSound("weapons/brontunload", 11);
			#### F 5 A_StartSound("weapons/brontoclose", 8);
			#### F 0
			{
				bNOPAIN = false;
			}
			Goto See;
	}
}