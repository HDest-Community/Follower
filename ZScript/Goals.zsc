extend class HDFollower
{
	enum SetGoalFlags
	{
		SGF_IGNOREVALID = 1,
		SGF_MULTI = 2,
		SGF_MOVEAWAY = 4
	}

	// --------------------------------------------------
	// ACTIONS
	// --------------------------------------------------

	protected void ClearGoal(bool keepLastPos = false)
	{
		if (TGoal is 'TargetGoal')
		{
			TGoal.Destroy();
		}
		TGoal = null; // [Ace] Just in case it's the player.

		if (!keepLastPos)
		{
			LastKnownPos = (0, 0, 0);
		}
	}

	protected bool TrySetGoal(vector3 spawnPos, int flags = 0)
	{
		Actor tg = Spawn('TargetGoal', spawnPos);
		if (tg && tg.pos.z - tg.floorz <= MaxStepHeight - 8 && Distance2D(tg) < MaxGoalRange && CheckSight(tg) && (flags & SGF_IGNOREVALID || tg.TestMobjLocation() && level.IsPointInLevel(spawnPos) && !CheckProximity('HDFollower', 64, 1, CPXF_ANCESTOR)))
		{
			if (flags & SGF_MULTI)
			{
				int count = tg.CountProximity('TargetGoal', 64);
				if (count > 0)
				{
					tg.SetOrigin((tg.Vec2Angle(radius * 2 * count, random(0, 359)), tg.pos.z), false);
				}
			}
			if (flags & SGF_MOVEAWAY)
			{
				tg.bSTANDSTILL = true;
			}
			ClearGoal(); // [Ace] Nuke old goal.
			TGoal = tg;
			return true;
		}
		else
		{
			tg.Destroy();
			return false;
		}
	}

	// --------------------------------------------------
	// CONSTANTS/VARIABLES
	// --------------------------------------------------

	const MaxGoalRange = 2048;
}

class TargetGoal : Actor
{
	Default
	{
		Radius 12;
		Height 52;
		+NOINTERACTION
	}

	States
	{
		Spawn:
			TNT1 A 35 * 15;
			Stop;
	}
}