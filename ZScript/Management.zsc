extend class FollowerHandler
{
	const InternalFollowers = 6;
	Array<HDFollower> Followers;

	private HDFollower CreateFollower(class<HDFollower> flw, int playerNum, uint newIndex, vector3 pos = (0, 0, 0))
	{
		let plr = players[playerNum].mo;
		if (plr)
		{
			let FollowerDef = GetDefaultByType(flw);

			// [Ace] New map who dis? Spawn a new follower.
			if (!FollowerDef.MissingClass || !plr.CheckInventory(FollowerDef.MissingClass, 1))
			{
				Actor a; bool success;
				if (pos == (0, 0, 0))
				{
					[success, a] = plr.A_SpawnItemEx(flw, random(16, 48), 0, random(0, 32), angle: random(0, 359), flags: SXF_NOCHECKPOSITION);
				}
				else
				{
					a = Actor.Spawn(flw, pos);
					success = true;
				}
				if (success)
				{
					let fol = HDFollower(a);
					fol.Index = newIndex;
					
					InsertFollower(fol);
					
					fol.ChangeLinkedPlayer(HDPlayerPawn(plr));

					// [Ace] These are here so that they are only called once when the follower is created.
					fol.InitWeapons();
					fol.GiveStartingItems();
					return fol;
				}
			}
		}
		return null;
	}

	void InsertFollower(HDFollower flw)
	{
		int insIndex = 0;
		int FollowerCount = Followers.Size();
		if (FollowerCount > 0)
		{
			for (int i = 0; i < FollowerCount; ++i)
			{
				if (flw.Index >= Followers[i].Index)
				{
					insIndex = i + 1;
				}
				else
				{
					insIndex = i;
					break;
				}
			}
		}
		Followers.Insert(insIndex, flw);
	}

	void RemoveFollower(HDFollower flw, bool permanent = false, bool noDestroy = false)
	{
		int Index = Followers.Find(flw);
		if (Index != Followers.Size())
		{
			if (permanent && flw.MissingClass && players[Net_Arbitrator].mo)
			{
				players[Net_Arbitrator].mo.A_GiveInventory(flw.MissingClass);
			}
			if (!noDestroy)
			{
				flw.Destroy();
			}
			Followers.Delete(Index);
		}
	}

	// --------------------------------------------------
	// INFORMATION
	// --------------------------------------------------

	private int GetUniqueIndex(int start = 100000000)
	{
		Array<FollowerBody> invFol;
		FetchFollowersInInventory(invFol);

		Array<int> indices;
		for (int i = 0; i < Followers.Size(); ++i)
		{
			indices.Push(Followers[i].Index);
		}
		for (int i = 0; i < invFol.Size(); ++i)
		{
			for (int j = 0; j < invFol[i].Data.Size(); ++j)
			{
				indices.Push(invFol[i].Data[j].Index);
			}
		}

		int size = indices.Size();
		while (size > 0 && indices.Find(start) != size)
		{
			start++;
		}

		return start;
	}
}

extend class HDFollower
{
	virtual void Dismiss()
	{
		if (Health <= 0)
		{
			switch (CanReach(MaxInventoryDistance))
			{
				case 1: ThinkMessage(LinkedPlayer, "$TOOFAR_PLR"); return;
				case 2: ThinkMessage(LinkedPlayer, "$NOTFACING_PLR"); return;
			}
		}

		for (int i = 0; i < Weapons.Size(); ++i)
		{
			Weapons[i].EmptyWeapon();
		}
		for (int i = 0; i < SlotCount; ++i)
		{
			DropInvItem(Slots[i], true);
		}
		let WornArmor = FindInventory("HDArmourWorn");
		if (WornArmor)
		{
			A_DropInventory(WornArmor.GetClass());
		}
		for (int i = 0; i < 64; ++i)
		{
			vector3 POff = ((random() - 128) * Radius / 128, (random() - 128) * Radius / 128, random() * Height / 256);
			vector3 PVel = ((1.0 / 4096) * (random() - 128), (1.0 / 4096) * (random() - 128), (1.0 / 4096) * (random() - 128));
			vector3 PAcc = ((1.0 / 16384) * (random() - 128), (1.0 / 16384) * (random() - 128), (1.0 / 16384) * (random() - 128));
			A_SpawnParticle(random(0, 1) ? Color(154, 49, 49) : Color(125, 24, 24), 0, TICRATE * 2, 4, 0, POff.x, POff.y, POff.z, PVel.x, PVel.y, PVel.z, PAcc.x, PAcc.y, PAcc.z);
		}
		if (!random[dismissrand](0, 10))
		{
			Console.Printf("%s disconnected.", GetTag());
		}
		Handler.RemoveFollower(self, true);
	}

	virtual void Reset()
	{
		OnRevive();
		ResetDamageCounters();
		GiveBody(-100);

		InitWeapons();
		ClearInventory();
		GiveStartingItems();

		SuturesLeft = 0;

		Status = FStatus_None;
		Order = FOrder_Follow;

		bNOPAIN = default.bNOPAIN;
		Translation = default.Translation;
	}
}