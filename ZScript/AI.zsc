enum FStatus
{
	FStatus_None,
	FStatus_HealingSelf,
	FStatus_HealingPlayer,
	FStatus_WaitingForWearable,
	FStatus_WaitingForWeapon,
	FStatus_InactiveOrDead
}

extend class HDFollower
{
	enum BlockedSide
	{
		BSide_Left = 1,
		BSide_Right = 2
	}

	// --------------------------------------------------
	// ACTIONS
	// --------------------------------------------------

	protected void AiThink()
	{
		if (Status == FStatus_InactiveOrDead || InStateSequence(CurState, FindState("Spawn"))) // [Ace] I don't remember why the Spawn state check...
		{
			return;
		}

		//bNOTRIGGER = !hdf_NoTrigger;

		int blockedSides = GetBlockedSides();

		Actor next = GetNextInChain();
		bool canSeeNext = CheckSight(next, SF_ALL);
		if (!canSeeNext && !TGoal && CanSeePlayer)
		{
			next = LinkedPlayer;
			canSeeNext = true;
		}

		if (hdf_debug & FDebug_Status)
		{
			Console.Printf("[%s] %s (index %i) has %s out with status %i.\nCurrent status is %i. Current order is %i. Follower is %smoving. Goal is %s.\nFollower is targeting %s. Follower is following %s. Commander is %s.\n--------------------",
				GetTimestamp(),
				GetTag(),
				Index,
				SelWeapon ? SelWeapon.GetName() : "no weapon",
				SelWeapon ? SelWeapon.Status : -1,
				Status, Order, !Moving ? "not " : "",
				TGoal ? TGoal.GetTag() : "nothing",
				FTarget.Actor ? FTarget.Actor.GetTag() : "nothing",
				next ? next.GetTag() : "nothing",
				LinkedPlayer ? LinkedPlayer.GetTag() : "nobody");
		}
		
		PNeedsHelp = PlayerIsIncapped(); // [Ace] You're just incapped.
		PNeedsMedic = PlayerNeedsMedic(); // [Ace] You're bleeding and incapped.
		int ffcount = Handler.FollowingFollowersCount();
		int findex = Handler.Followers.Find(self);
		double distDiv = next != LinkedPlayer ? 1.0 + 0.26 * (min(4, ffcount - 1)) : 1.0;
		
		if (!SelWeapon)
		{
			if (( Order == FOrder_HealSelf || (Order <= FOrder_Follow && ReloadCoolDown <= 0 && NeedToHealSelf()) ) && !Moving && Status != FStatus_HealingSelf && (GetAmount('PortableMedikit') > 0 || SuturesLeft > 0))
			{
				Order = FOrder_HealSelf;
				Status = FStatus_HealingSelf;
				SetStateLabel('StapleOwnAss');
			}

			if (Status <= FStatus_WaitingForWeapon)
			//if (Status >= FStatus_WaitingForWearable && Status <= FStatus_WaitingForWeapon)
			{
				switch (Status)
				{
					//case FStatus_WaitingForWearable: LookForWearable(); break;
					case FStatus_WaitingForWeapon: LookForWeapon(); break;
				}
				A_Face(LinkedPlayer, 15);
			}
		}

		if (Status == FStatus_None)
		{
			if (!SelWeapon || SelWeapon.Status < FollowerWeapon.WStatus_Firing)
			{
				bNOPAIN = false;

				if (!Moving && !IsInIdleState())
				{
					SetStateLabel('Idle');
				}
				else if (Moving && !IsInMovingState())
				{
					SetStateLabel('Moving');
				}
			}

			if (Order == FOrder_ComeAndHelp && bFRIENDLY && DistanceToPlayer < 512 && CanSeePlayer)
			{
				if (!PNeedsMedic && !PNeedsHelp)
				{
					StopHealing();	
				}
				else if (DistanceToPlayer < MedicRange && Status != FStatus_HealingPlayer)
				{
					Status = FStatus_HealingPlayer;
					if (PNeedsMedic)
					{
						SetStateLabel('StapleHumptyDumptyBackTogetherAgain');
					}
					else if (PNeedsHelp)
					{
						SetStateLabel('PullYouUp');
					}
				}
				else
				{
					TGoal = LinkedPlayer;
				}
			}
			else if (Order == FOrder_Follow)
			{
			
				bool NextTeleported;
				bNOTRIGGER=False;
				if (canSeeNext)
				{
					LastKnownPos = next.Pos;
					if(Distance3D(next) < GetMinRange(TGoal, distDiv) && MissPlayer < GetDefaultByType("HDFollower").MissPlayer){MissPlayer = GetDefaultByType("HDFollower").MissPlayer;}
				}
				
				if(
			abs(LastKnownPos.X - next.pos.x)>=64
			||abs(LastKnownPos.Y - next.pos.y)>=64
			){
			LastKnownPos = (LastKnownPos!=(0,0,0))?LastKnownPos:(Next.Prev.X + LastVel.X*200, Next.Prev.Y + LastVel.Y*200, Next.Prev.Z);
			NextTeleported=True;}
			Else LastVel = Next.Vel;
			if(!NextTeleported)bNOTRIGGER=True;
				
				
		

				// [Ace] Go to goal if it's too far away.
				// !bSTANDSTILL means the follower will only chase goals if its current goal isn't forced.
				double DistanceToNext = Distance3D(next);
				if (bFRIENDLY && !NextTeleported && (DistanceToNext > GetMinRange(TGoal, distDiv) || !canSeeNext) && DistanceToNext < MaxFollowRange && (!TGoal || !TGoal.bSTANDSTILL))
				{
					if (canSeeNext)
					{
						TGoal = next;
						if(DistanceToNext < GetMinRange(TGoal, distDiv) && MissPlayer < GetDefaultByType("HDFollower").MissPlayer)MissPlayer = GetDefaultByType("HDFollower").MissPlayer;
						else if(MissPlayer <= 0){PrintMessage(GetResponse("FOLLOW_MISS"), "MissedPlayer", PMType_General);MissPlayer = GetDefaultByType("HDFollower").MissPlayer*50;}
					}
					// [Ace] If following the goal and the goal is nearby but suddenly goes around a corner, try to go around the same corner.
					else if (LastKnownPos != (0, 0, 0) && (!TGoal || (TGoal && TGoal.pos != LastKnownPos)))
					{
						TrySetGoal(LastKnownPos, SGF_IGNOREVALID | SGF_LASTKNOWN);
						if(MissPlayer <= 0){PrintMessage(GetResponse("FOLLOW_MISS"), "MissedPlayer", PMType_General);MissPlayer = GetDefaultByType("HDFollower").MissPlayer*50;}
					}
				}
				if(bFRIENDLY && NextTeleported)
				{
					if(MissPlayer <= 0){PrintMessage(GetResponse("FOLLOW_MISS"), "MissedPlayer", PMType_General);MissPlayer = GetDefaultByType("HDFollower").MissPlayer*50;}
					TrySetGoal(LastKnownPos, SGF_IGNOREVALID | SGF_LASTKNOWN);
					NextTeleported=false;
					//Console.Printf("Teleported!");
				}
			
			}
			else if (Order == FOrder_Stay && DistanceToPlayer < HDCONST_ONEMETRE * 5)
			{
				A_Face(LinkedPlayer, 15);
			}

			if (hdf_collectbrass)
			{
				VacuumBrass();
			}

			// [Ace] Using potions.
			if ((!SelWeapon || SelWeapon.Status == FollowerWeapon.WStatus_Idle) && (Order <= FOrder_Stay || Order == FOrder_Follow && ReloadCoolDown <= 0) && !Moving && CanHealSelf() && GetAmount('HDHealingPotion') > 0 && GetAge() % 24 == 0)
			{
				let potion = FindLowestAmount('HDHealingPotion');
				potion.Amount--;

				int toHeal = default.Health / 4;
				HealSelf(toHeal);
				A_StartSound("potion/chug", 5);

				if (potion.Amount == 0)
				{
					TakeInvItem(potion, FIF_FORCE | FIF_REMOVE);
					A_StartSound("potion/open", 6);

					Actor a = Spawn("SpentBottle", pos + (0, 0, height- 4), ALLOW_REPLACE);
					a.angle = angle + 2;
					a.vel = vel;
					a.A_ChangeVelocity(3, 1, 4, CVF_RELATIVE);
					
					a = Spawn("SpentCork", pos + (0, 0, height - 4) , ALLOW_REPLACE);
					a.angle = angle + 3;
					a.vel = vel;
					a.A_ChangeVelocity(5, 3, 4, CVF_RELATIVE);
				}
			}

			// [Ace] Walk away if you get too close.
			if ((!Moving || TGoal && TGoal.bSTANDSTILL) && (
			(DistanceToPlayer <= HDCONST_ONEMETRE + radius + LinkedPlayer.radius && GetPlayerMovementAngle() <= MaxMovementAngle && ((LinkedPlayer.vel.xy.length() > 0.25 && LinkedPlayer.player.cmd.buttons & BT_SPEED) || LinkedPlayer.vel.xy.length() > 4 || LinkedPlayer.vel.xy.length() - (LinkedPlayer.Vel.X*Cos(LinkedPlayer.Angle) + LinkedPlayer.Vel.Y*Sin(LinkedPlayer.Angle)) > 0.2))||
			(DistanceToPlayer <= radius + LinkedPlayer.radius + HDCONST_ONEMETRE * 0.1 && GetPlayerMovementAngle() <= MaxMovementAngle && (LinkedPlayer.vel.xy.length() > 0.2 || LinkedPlayer.vel.xy.length() - (LinkedPlayer.Vel.X*Cos(LinkedPlayer.Angle) + LinkedPlayer.Vel.Y*Sin(LinkedPlayer.Angle)) > 0.1))
			))
			{
				TrySetGoal(Vec3Angle(HDCONST_ONEMETRE * LinkedPlayer.Vel.xy.length(), AngleTo(LinkedPlayer) + 180), SGF_IGNOREVALID | SGF_MOVEAWAY);
			}

			// [Ace] Mutually put out any fires.
			for (int i = 0; i < Handler.Followers.Size(); ++i)
			{
				if (Handler.Followers[i] != self && self.Distance3D(Handler.Followers[i]) <= HDCONST_ONEMETRE)
				{
					A_GiveInventory('HDFireDouse', 3);
					Handler.Followers[i].A_GiveInventory('HDFireDouse', 3);
				}
			}
			if (DistanceToPlayer <= HDCONST_ONEMETRE)
			{
				A_GiveInventory('HDFireDouse', 3);
				LinkedPlayer.A_GiveInventory('HDFireDouse', 3);
			}
		}
		
		// [Mickromash] try to dodge projectile
		if(abs(Vel.Z) <= 0.1 && DodgeTimer <= 0)A_DodgeFireBall(40);

		// [Ace] Enemy searching and weapon handling.
		if (Weapons.Size() > 0)
		{
			if (Order != FOrder_GoThere && (!SelWeapon || SelWeapon.Status == FollowerWeapon.WStatus_Idle) && (!bFRIENDLY || Stance == FStance_Aggressive) && HasUsableWeapons())
			{
				AcquireTargets();
		if(ReactionTime >= Default.ReactionTime && !CheckTarget() && ReloadCoolDown <= 0)
		{
			int result = 213;
			for (int i = 0; i < Weapons.Size(); ++i)
			{
				if (Weapons[i]){result = Weapons[i].TryReload(Weapons[i].TRF_CHECK);}
				class<HDAmmo> AType, MType; int MaxMag;
				[AType, MType, MaxMag] = Weapons[i].GetAmmoType();
				if (Weapons[i] && (Weapons[i].Mag <= 0 || !MType/* && Weapons[i].Mag <= MaxMag/2*/) && result == FollowerWeapon.RResult_CanReload){Weapons[i].Status = FollowerWeapon.WStatus_Reloading;SelWeapon = Weapons[i];
				if(GetAmount(MType)<=MaxMag && Weapons[i].Mag+GetAmount(AType)<=MaxMag)PrintMessage(GetResponse("NOAMMO_"..Weapons[i].GetLocalizationTag()), "NoAmmo/"..Weapons[i].GetLocalizationTag(), PMType_Critical); Break;}
			}
		}	
			}
			
			if (SelWeapon && SelWeapon.Status == FollowerWeapon.WStatus_Reloading)
			{
				if (SelWeapon.DoReloadSequence(WeaponTicker))
				{
					IdleWeapon();
				}
				else
				{
					ClearTarget(); // [Ace] Allow others to target the enemy if currently reloading.
					WeaponTicker++;
				}
			}
			else if (CheckTarget())
			{
				if ((!SelWeapon || SelWeapon.Status == FollowerWeapon.WStatus_Idle) && ReactionTime-- <= 0)
				{
					SelectBestWeapon(FTarget.Actor);
					if (SelWeapon && SelWeapon.Status == FollowerWeapon.WStatus_Idle)
					{
						bNOPAIN = true;
						SelWeapon.Status = FollowerWeapon.WStatus_Firing;
						SetStateLabel('See');
					}
					else
					{
						ClearTarget(); // [Ace] Allow others to target the enemy if suddenly out of weapons.
					}
				}
			}
			else
			{
				ClearTarget();
				ReactionTime = default.ReactionTime;
				if (SelWeapon && SelWeapon.Status == FollowerWeapon.WStatus_Idle)
				{
					if (hdf_debug & FDebug_Weapons)
					{
						Console.Printf("[%s] %s's %s was nulled. Was idling.", GetTimestamp(), GetTag(), SelWeapon.GetName());
					}
					SelWeapon = null;
				}
			}
		}

		// [Ace] Crouching. One day I will implement proper sprites for this. Today is not that day.
		if (bFRIENDLY && Status == FStatus_None && Order <= FOrder_Stay && PlayerIsCrouching() && !PlayerIsProne() && CanSeePlayer && DistanceToPlayer < HDCONST_ONEMETRE * 30 || pos.z + default.Height > ceilingz)
		{
			CrouchFactor = min(CrouchFactor + 0.14, 0.5);
		}
		else if (CrouchFactor > 0)
		{
			CrouchFactor = max(CrouchFactor - 0.10, 0);
		}

		scale.y = default.scale.y * (1.0 - CrouchFactor);
		A_SetSize(-1, default.Height * (1.0 - CrouchFactor));
		cameraheight=GetDefaultByType("HDMobBase").CameraHeight * (1.0 - CrouchFactor);
		gunheight=cameraheight-1.5;

		double goalDist2 = TGoal ? (TGoal is 'TargetGoal' ? Distance2D(TGoal) : Distance3D(TGoal)) : 0;

		// [Ace] Movement. Always travel to goals if there are any.
		if (Status == FStatus_None && (!SelWeapon || SelWeapon.Status != FollowerWeapon.WStatus_Firing) && TGoal && goalDist2 < MaxGoalRange && DodgeTimer <= 23)
		{
			double distDiff = max(goalDist2 - GetMinRange(TGoal, distDiv), 0);
			double targetSpeed = min(0.2 + (distDiff * 0.5) / MaxMovementSpeed, MaxMovementSpeed);
			if (MovementSpeed < targetSpeed)
			{
				MovementSpeed = min(MovementSpeed + 0.5, targetSpeed);
			}
			else if (MovementSpeed > targetSpeed)
			{
				MovementSpeed = max(targetSpeed, MovementSpeed - 0.5);
			}

			if (MovementSpeed > MaxMovementSpeed * 0.25 && tics == 8)
			{
				tics = 4;
			}
			if (MovementSpeed > MaxMovementSpeed * 0.75 && tics == 4)
			{
				tics = 3;
			}

			if (distDiff < 0.25)
			{
				A_ChangeVelocity(0, 0, vel.z, CVF_REPLACE);
				ClearGoal(true);
			}
			else
			{
				// [Ace] Same as the corner thing from above but does it if the follower is moving.
				A_Face(TGoal, 0, 0);

				int sideVel = 0;
				if (!(blockedSides & BSide_Left) && blockedSides & BSide_Right)
				{
					sideVel = 1;
				}
				if (blockedSides & BSide_Left && !(blockedSides & BSide_Right))
				{
					sideVel = -1;
				}

				A_ChangeVelocity(MovementSpeed, MovementSpeed * sideVel, waterlevel >= 2 ? MovementSpeed * sin(-pitch) : vel.z, CVF_RELATIVE | CVF_REPLACE);

				// [Ace] Ascend/descend ladders.
				bool nearLadder = CheckProximity('hdladdertop', radius + 32) || CheckProximity('hdladderbottom', radius + 32);
				MaxDropOffHeight = default.MaxDropOffHeight + (NearLadder ? LADDER_MAX : 0);
				bFLOORHUGGER = nearLadder;

				// [Ace] There is a gap that can be crossed. If the player can do it, so can the follower.
				bNODROPOFF = !(goalDist2 < HDCONST_ONEMETRE * 10 && (pos.z > floorz || abs(TGoal.floorz - floorz) < default.MaxDropOffHeight) && abs(TGoal.pos.z - pos.z) < default.MaxDropOffHeight);

				// [Ace] Stop trying to reach goal shortly after losing LOS.
				if (!CheckSight(TGoal, SF_ALL))
				{
					if (++NoSightTics == 50)
					{
						NoSightTics = 0;
						ClearGoal(true);
					}
				}
				else
				{
					NoSightTics = 0;
				}

				// [Ace] Only play idle comments if moving.
				if (CommentTimer <= 0)
				{
					PlayIdleComment();
				}
			}
		}

		Moving = vel.xy.length() > 0.01;
		
		// [Mickromash] try to dodge projectile
		if(abs(Vel.Z) <= 0.1 && DodgeTimer <= 0)A_DodgeFireBall(40);
		
		if (!Moving && Order == FOrder_GoThere)
		{
			TryActivateLine();
			Order = FOrder_Stay;
		}
	}

	private void TryActivateLine()
	{
		FLineTraceData data;
		LineTrace(angle, 40, 0, 0, height - 8, data: data);
		if (data.HitType == FLineTraceData.TRACE_HitWall)
		{
			if (ActivateAsPlayer)
			{
				data.HitLine.Activate(LinkedPlayer, 0, SPAC_Use);
			}
			else
			{
				data.HitLine.Activate(self, 0, SPAC_Use);
			}
		}
		ActivateAsPlayer = false;
	}
	
	Void A_DodgeFireBall(int CoolDown)
	{
		Actor FirBal, mo;
		ThinkerIterator Iter = ThinkerIterator.Create('HDFireball');
		While (mo = HDFireball(iter.Next()))
		{
			if(mo.Distance3D(self)>140)Continue;
			if((mo.Vel.X > 0 && mo.Pos.X > Pos.X && abs(mo.Vel.X) > abs(mo.Vel.Y)) || (mo.Vel.Y > 0 && mo.Pos.Y > Pos.Y && abs(mo.Vel.Y) > abs(mo.Vel.X)) || (mo.Vel.X < 0 && mo.Pos.X < Pos.X && abs(mo.Vel.X) > abs(mo.Vel.Y)) || (mo.Vel.Y < 0 && mo.Pos.Y < Pos.Y && abs(mo.Vel.Y) > abs(mo.Vel.X)))
			Continue;
			if(abs(VectorAngle(mo.Vel.X, mo.Vel.Y)) > abs(mo.AngleTo(Self)) + 30 || abs(VectorAngle(mo.Vel.X, mo.Vel.Y)) < abs(mo.AngleTo(Self)) - 30)
			Continue;
			if(mo.Vel.XY.Length() + abs(mo.Vel.Z) <= 1)Continue;
			if(!hdf_dodgeUnseen)
			{
			Let OldTarget = Target;
			Target = mo;
			if(!CheckIfTargetInLOS(180, 0, 140, 0)){Target=OldTarget;Continue;}
			Target=OldTarget;
			}
			if(!FirBal || FirBal.Distance3D(Self) > mo.Distance3D(Self))FirBal = mo;
		}
				
		if(FirBal != NULL)
		{
			Int Direction = 0;
			FLineTraceData TraceLeft, TraceRight;
			LineTrace(AngleTo(FirBal) - 90, HDCONST_ONEMETRE * 3, 0, TRF_NOSKY, GunHeight, data: TraceLeft);
			LineTrace(AngleTo(FirBal) + 90, HDCONST_ONEMETRE * 3, 0, TRF_NOSKY, GunHeight, data: TraceRight);
			//Mickromahs - Dodge only left or right if projectile is in line with follower or if there're walls near follower
			if(TraceLeft.HitType == TraceLeft.TRACE_HITWALL || TraceRight.HitType == TraceLeft.TRACE_HITWALL || !(abs(VectorAngle(FirBal.Vel.X, FirBal.Vel.Y)) > abs(FirBal.AngleTo(Self)) + 8 || abs(VectorAngle(FirBal.Vel.X, FirBal.Vel.Y)) < abs(FirBal.AngleTo(Self)) - 8))
			{
				if(TraceLeft.HitType == TraceLeft.TRACE_HITWALL || (TraceLeft.HitType == TRACE_HitActor  && TraceRight.HitType == TraceLeft.TRACE_HITWALL))
				Direction = 90;
				else Direction = -90;
				Int RandVel = frandom(5.4, 6);
				Int OldAngle = Angle;
				Angle = AngleTo(FirBal) + Direction;
				A_ChangeVelocity(RandVel, 0, Vel.Z + Random(1.5, 2.2), CVF_RELATIVE | CVF_REPLACE);
				Angle = OldAngle;
			}
			else
			{
				//Thanks to GammaGhost for helping with getting pitch from velocity
				Vector3 offset = (AngleToVector(VectorAngle(FirBal.Vel.X, FirBal.Vel.Y), abs(Cos(-atan2 (FirBal.Vel.Z, FirBal.Vel.XY.Length ())))), -sin(-atan2 (FirBal.Vel.Z, FirBal.Vel.XY.Length ()))) * (FirBal.Distance3D(Self) - Radius);
				Actor BalDirect = Spawn("Actor", FirBal.Pos + offset);
				if(BalDirect)
				{
				Int RandVel = frandom(5.4, 6);
				Int OldAngle = Angle;
				Angle = AngleTo(BalDirect) + 180;
				A_ChangeVelocity(RandVel, 0, Vel.Z + Random(1.5, 2.2), CVF_RELATIVE | CVF_REPLACE);
				Angle = OldAngle;
				BalDirect.Destroy();
				}
			}
			//Moving = True;
			DodgeTimer = CoolDown;
		}
	}

	// --------------------------------------------------
	// INFORMATION
	// --------------------------------------------------

	private Actor GetNextInChain()
	{
		int findex = Handler.Followers.Find(self);
		for (int i = findex - 1; i >= 0; --i)
		{
			HDFollower flw = Handler.Followers[i];
			if (!flw)
			{
				Handler.Followers.Delete(i);
				continue;
			}
			if (flw.Status != FStatus_InactiveOrDead && flw.bFRIENDLY && flw.Order == FOrder_Follow && flw.LinkedPlayer == LinkedPlayer && Distance3D(flw) < MaxFollowRange)
			{
				return Handler.Followers[i];
			}
		}
		return LinkedPlayer;
	}

	bool IsInIdleState()
	{
		return InStateSequence(CurState, FindState('Idle'));
	}

	bool IsInMovingState()
	{
		return InStateSequence(CurState, FindState('Moving'));
	}

	int GetBlockedSides()
	{
		int sides = 0;
		FLineTraceData data;

		bool hit = LineTrace(angle + 10, radius * 2, 0, TRF_SOLIDACTORS, height * 0.5, 0, -radius, data);
		if (hit && (data.HitLine || data.HitActor && data.HitActor.Species != Species && data.HitActor.CanCollideWith(self, false)))
		{
			sides |= BSide_Left;
		}
		hit = LineTrace(angle - 10, radius * 2, 0, TRF_SOLIDACTORS, height * 0.5, 0, radius, data);
		if (hit && (data.HitLine || data.HitActor && data.HitActor.Species != Species && data.HitActor.CanCollideWith(self, false)))
		{
			sides |= BSide_Right;
		}
		
		return sides;
	}

	double GetMinRange(Actor trgt, double distDiv)
	{
		if (!trgt)
		{
			return 0;
		}

		if (Order == FOrder_ComeAndHelp && (PNeedsMedic || PNeedsHelp))
		{
			return trgt.Radius + Radius;
		}

		if (trgt is 'TargetGoal')
		{
			return HDCONST_ONEMETRE * 0.3;
		}
		
		return (HDCONST_ONEMETRE * 2) / distDiv;
	}

	// --------------------------------------------------
	// CONSTANTS
	// --------------------------------------------------

	const MaxFollowRange = HDCONST_ONEMETRE * 25.0;
	const MaxWaitRange = HDCONST_ONEMETRE * 12;
	const MaxSearchRange = 24; // [Ace] This is for the LookFor* stuff.

	const SF_ALL = SF_IGNOREVISIBILITY | SF_SEEPASTSHOOTABLELINES | SF_SEEPASTBLOCKEVERYTHING | SF_IGNOREWATERBOUNDARY;
	const SF_NOINVISIBLE = SF_ALL & ~SF_IGNOREVISIBILITY;

	// --------------------------------------------------
	// VARIABLES
	// --------------------------------------------------

	HDPlayerPawn LinkedPlayer;
	protected FollowerTarget FTarget;
	private Actor TGoal;

	private bool Moving;
	FStatus Status;
	FOrder Order;
	FStance Stance;
	private FOrder PrevOrder;

	private vector3 LastKnownPos;

	private int CommentTimer;
	private bool ActivateAsPlayer;
	private int NoSightTics; // [Ace] Used with CheckSight.

	private bool CanSeePlayer;
	private double DistanceToPlayer;
	private bool PNeedsHelp;
	private bool PNeedsMedic;
	private double CrouchFactor;
	private Vector3 LastVel;
}