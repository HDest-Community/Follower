enum FStatus
{
	FStatus_None,
	FStatus_InCombat,
	FStatus_WaitingForArmor,
	FStatus_InactiveOrDead
}

extend class HDFollower
{
	private void AiThink()
	{
		Actor Next = GetNextInChain();
		// [Ace] This is always going to be true if Next != LinkedPlayer.
		bool CanSeeNext = CheckSight(Next, SF_SEEPASTSHOOTABLELINES);

		if (hdf_debug == 3)
		{
			Console.Printf("Follower "..GetDisplayName().." has %s out.\nCurrent status is %i.\nFollower is targeting %s. Follower following %s.\n--------------------",
				SelWeapon ? SelWeapon.GetName() : "no weapon",
				Status, CTarget ? CTarget.GetTag() : "nothing",
				Next is 'HDFollower' ? HDFollower(Next).GetDisplayName() : (Next ? Next.GetTag() : "nothing"));
		}

		PNeedsHelp = PlayerIsIncapped(); // [Ace] You're just incapped.
		PNeedsMedic = PlayerNeedsMedic(); // [Ace] You're bleeding and incapped.
		bool IsHelping = IsHelpingPlayer();
		int FFCount = Handler.FollowingFollowersCount();
		int FIndex = Handler.Followers.Find(self);
		double DistDiv = 1.0 + 0.1 * (min(10, FFCount - 1));

		if (Status != FStatus_InCombat)
		{
			if (SelWeapon)
			{
				ClearWeapon();
			}
			else
			{
				ClearTarget();
			}

			if (!IsHelping)
			{
				if (!Moving && !IsInIdleState())
				{
					SetStateLabel('Idle');
				}
				else if (Moving && !IsInMovingState())
				{
					SetStateLabel('Moving');
				}
			}

			if (Status == FStatus_None)
			{
				if (Order == FOrder_ComeAndHelp && bFRIENDLY && DistanceToPlayer < 512 && CanSeePlayer)
				{
					if (DistanceToPlayer < MedicRange && !IsHelping) // [Ace] Start stapling if close enough. Minimum distance is 22. Don't go any lower or follower will be stuck walking towards you.
					{
						if (PNeedsMedic)
						{
							SetStateLabel('StapleHumptyDumptyBackTogetherAgain');
						}
						else if (PNeedsHelp)
						{
							SetStateLabel('PullYouUp');
						}
						else
						{
							Order = FOrder_Follow;
						}
					}
					else
					{
						TGoal = LinkedPlayer;
					}
				}
				else if (Order < FOrder_Cover)
				{
					if (CanSeeNext)
					{
						LastKnownPos = Next.Pos;
					}

					// [Ace] Go to goal if they're too far away.
					double DistanceToNext = Distance3D(Next);
					if (bFRIENDLY && DistanceToNext > MinFollowRange / DistDiv && DistanceToNext < MaxFollowRange)
					{
						if (CanSeeNext)
						{
							TGoal = Next;
						}
						// [Ace] If following the player and the player is nearby but suddenly goes around a corner, try to go around the same corner.
						else if (LastKnownPos != (0, 0, 0) && (!TGoal || TGoal && TGoal.pos != LastKnownPos))
						{
							TrySetGoal(LastKnownPos, true);
						}
					}

					if (!Moving && (IdleTimer <= 0 || IsSteppingOnSomeone()))
					{
						// [Ace] Spawn a new idle spot.
						for (int i = 0; i < 100; ++i)
						{
							vector3 SpotPos = Vec3Angle(random(16, 96), random(0, 359));
							if (TrySetGoal(SpotPos))
							{
								break;
							}
						}
						ResetIdleTimer();
					}
				}
				else if (Order == FOrder_Cover && DistanceToPlayer < 42 * 5)
				{
					A_Face(LinkedPlayer, 45);
				}

				if (hdf_collectbrass)
				{
					VacuumBrass();
				}
			}
		}

		// [Ace] Crouching. One day I will implement proper sprites for this. Today is not that day.
		if (bFRIENDLY && Status <= FStatus_InCombat && Order < FOrder_Cover && PlayerIsCrouching())
		{
			CrouchFactor = min(CrouchFactor + 0.20, 0.5);
		}
		else if (CrouchFactor > 0)
		{
			CrouchFactor = max(CrouchFactor - 0.17, 0);
		}

		scale.y = default.scale.y * (1.0 - CrouchFactor);
		A_SetSize(-1, default.Height * (1.0 - CrouchFactor));
		
		if (Weapons.Size() > 0 && (Status != FStatus_InCombat || !SelWeapon) && (!bFRIENDLY || Order == FOrder_Follow || Order == FOrder_Cover || Order == FOrder_ComeAndHelp))
		{
			LookForEnemies();
		}

		// [Ace] Movement. Always travel to goals if there are any. Status between moving and idle should not be set elsewhere.
		if (Status != FStatus_WaitingForArmor && (Status != FStatus_InCombat || Order == FOrder_GoAndCover) && TGoal && (TGoal is Next.GetClass() && Distance2D(TGoal) > (Order == FOrder_ComeAndHelp && (PNeedsMedic || PNeedsHelp) ? MedicRange : MinFollowRangeStop / DistDiv) || TGoal is "TargetGoal" && Distance2D(TGoal) > 16) && Distance2D(TGoal) < MaxGoalRange)
		{
			// [Ace] Don't slow down if player is bleeding out their ass or needs help getting up.
			if (TGoal is "PlayerPawn" && Order == FOrder_ComeAndHelp && (PNeedsMedic || PNeedsHelp))
			{
				if (tics == 2)
				{
					tics = 1;
				}
				MovementSpeed = MaxMovementSpeed;
			}
			else
			{
				if (Distance2D(TGoal) < 48)
				{
					MovementSpeed = default.MovementSpeed / 2;
				}
				else
				{
					// [Ace] The tics adjustment is purely visual.
					if (tics == 2)
					{
						tics = 1;
					}
					MovementSpeed = min(default.MovementSpeed + Distance2D(TGoal) / 80.0, MaxMovementSpeed);
				}
			}

			// [Ace] Same as the corner thing from above but does it if the follower is moving.
			if (TGoal == Next)
			{
				if (CanSeeNext)
				{
					LastKnownPos = TGoal.Pos;
					A_Face(TGoal, 0, 0);
				}
				else
				{
					TrySetGoal(LastKnownPos);
				}
			}
			else
			{
				A_Face(TGoal, 0, 0);
			}

			ResetIdleTimer();

			A_ChangeVelocity(MovementSpeed, 0, vel.z, CVF_RELATIVE | CVF_REPLACE);
			Moving = true;

			// [Ace] Ascend/descend ladders.
			bool NearLadder = CheckProximity('hdladdertop', radius + 32) || CheckProximity('hdladderbottom', radius + 32);
			MaxDropOffHeight = default.MaxDropOffHeight + (NearLadder ? LADDER_MAX : 0);
			bFLOORHUGGER = NearLadder;

			// [Ace] Stop trying to reach goal shortly after losing LOS.
			if (!CheckSight(TGoal, SF_SEEPASTSHOOTABLELINES) && ++NoSightTics == 35 * 3)
			{
				NoSightTics = 0;
				ClearGoal();
			}

			// [Ace] Only play idle comments if moving.
			if (CommentTimer <= 0)
			{
				PlayIdleComment();
			}
		}
		else // [Ace] Deceleration.
		{
			vel.xy *= 0.96;

			if (Order == FOrder_GoAndCover && vel.xy.length() < 0.65)
			{
				Order = FOrder_Cover;
			}

			if (vel.xy.length() < 0.15)
			{
				ClearGoal(true);
				A_ChangeVelocity(0, 0, vel.z, CVF_REPLACE);
				Moving = false;
			}
		}
	}

	private void TryActivateLine()
	{
		FLineTraceData LineData;
		LineTrace(angle, 40, 0, 0, height - 8, data: LineData);
		if (LineData.HitType == FLineTraceData.TRACE_HitWall)
		{
			if (ActivateAsPlayer)
			{
				LineData.HitLine.Activate(LinkedPlayer, 0, SPAC_Use);
			}
			else
			{
				LineData.HitLine.Activate(self, 0, SPAC_Use);
			}
		}
		ActivateAsPlayer = false;
	}

	private bool IsInIdleState()
	{
		return InStateSequence(CurState, FindState('Idle'));
	}

	private bool IsInMovingState()
	{
		return InStateSequence(CurState, FindState('Moving'));
	}

	private void ResetIdleTimer()
	{
		IdleTimer = random(35 * 3, 35 * 6) * (Order == FOrder_Cover ? 3 : 1);
	}

	private bool IsSteppingOnSomeone()
	{
		if (bOnMobj)
		{
			if (Distance2D(LinkedPlayer) <= LinkedPlayer.Radius + Radius)
			{
				return true;
			}

			for (int i = 0; i < Handler.Followers.Size(); ++i)
			{
				if (Distance2D(Handler.Followers[i]) <= Handler.Followers[i].Radius + Radius)
				{
					return true;
				}
			}
		}

		return false;
	}

	private Actor GetNextInChain()
	{
		int FIndex = Handler.Followers.Find(self);
		for (int i = FIndex - 1; i >= 0; --i)
		{
			HDFollower flw = Handler.Followers[i];
			if (flw.Status != FStatus_InactiveOrDead && flw.bFRIENDLY && (flw.Order == FOrder_Follow || flw.Order == FOrder_FollowIgnore) && flw.LinkedPlayer == LinkedPlayer && Distance3D(flw) < MaxFollowRange && CheckSight(flw, SF_SEEPASTSHOOTABLELINES))
			{
				return Handler.Followers[i];
			}
		}
		return LinkedPlayer;
	}

	const MinFollowRangeStop = 96; // [Ace] If following the player, stop if closer than this distance.
	const MinFollowRange = 128;
	const MaxFollowRange = 768;

	HDPlayerPawn LinkedPlayer;
	protected Actor CTarget;
	private Actor TGoal;

	private bool Moving;
	FStatus Status;
	FOrder Order;

	private vector3 LastKnownPos;

	private int IdleTimer;
	private int CommentTimer;
	private bool ActivateAsPlayer;
	private int NoSightTics; // [Ace] Used with CheckSight.

	private bool CanSeePlayer;
	private double DistanceToPlayer;
	private bool PNeedsHelp;
	private bool PNeedsMedic;
	private double CrouchFactor;
}