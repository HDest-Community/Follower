enum FStatus
{
	FStatus_None,
	FStatus_InCombat,
	FStatus_HealingSelf,
	FStatus_HealingPlayer,
	FStatus_WaitingForArmor,
	FStatus_WaitingForWeapon,
	FStatus_InactiveOrDead
}

extend class HDFollower
{
	enum BlockedSide
	{
		BSide_Left = 1,
		BSide_Right = 2
	}
	// --------------------------------------------------
	// ACTIONS
	// --------------------------------------------------

	protected void AiThink()
	{
		if (Status == FStatus_InactiveOrDead || InStateSequence(CurState, FindState("Spawn"))) // [Ace] I don't remember why the Spawn state check...
		{
			return;
		}

		int blockedSides = GetBlockedSides();

		Actor next = GetNextInChain();
		bool canSeeNext = CheckSight(next, SF_SEEPASTSHOOTABLELINES | SF_IGNOREVISIBILITY);
		if (!canSeeNext && (!TGoal || (blockedSides & (BSide_Left | BSide_Right))) && CanSeePlayer)
		{
			next = LinkedPlayer;
			canSeeNext = true;
		}

		if (hdf_debug == 3)
		{
			Console.Printf("%s (index %i) has %s out.\nCurrent status is %i.\nFollower is targeting %s. Follower following %s.\n--------------------",
				GetTag(),
				Index,
				SelWeapon ? SelWeapon.GetName() : "no weapon",
				Status, CTarget ? CTarget.GetTag() : "nothing",
				next is 'HDFollower' ? HDFollower(next).GetTag() : (next ? next.GetTag() : "nothing"));
		}

		if (hdf_debug == 4)
		{
			Console.Printf("%s has %i/%i health, %i body damage, %i bloodloss, and %i shield.\n--------------------",
				GetTag(),
				Health, default.Health,
				BodyDamage,
				Bloodloss,
				GetAmount('HDMagicShield'));
		}

		pNeedsHelp = PlayerIsIncapped(); // [Ace] You're just incapped.
		pNeedsMedic = PlayerNeedsMedic(); // [Ace] You're bleeding and incapped.
		int ffcount = Handler.FollowingFollowersCount();
		int findex = Handler.Followers.Find(self);
		double distDiv = next != LinkedPlayer ? 1.0 + 0.13 * (min(8, ffcount - 1)) : 1.0;
		
		if (Status != FStatus_InCombat)
		{
			if (!CheckTarget())
			{
				ClearWeapon();
				ClearTarget();
			}
			else if (ReactionTime-- <= 0)
			{
				ReactionTime = default.ReactionTime;
				Status = FStatus_InCombat;
				SetStateLabel('See');
			}

			if (Order == FOrder_HealSelf && !Moving && Status != FStatus_HealingSelf)
			{
				Status = FStatus_HealingSelf;
				SetStateLabel('StapleOwnAss');
			}

			if (Status >= FStatus_WaitingForArmor && Status <= FStatus_WaitingForWeapon)
			{
				if (Distance3D(LinkedPlayer) > MaxWaitRange)
				{
					switch (Status)
					{
						case FStatus_WaitingForArmor: PrintMessage(GetResponse("ARMORGIVE_RANAWAY"), "ArmorGive/RanAway", PMType_Critical); break;
						case FStatus_WaitingForWeapon: PrintMessage(GetResponse("WEAPONGIVE_RANAWAY"), "WeaponGive/RanAway", PMType_Critical); break;
					}
					Status = FStatus_None;
				}
				else
				{
					switch (Status)
					{
						case FStatus_WaitingForArmor: LookForArmor(); break;
						case FStatus_WaitingForWeapon: LookForWeapon(); break;
					}
					A_Face(LinkedPlayer, 45);
				}
			}
			else if (Status == FStatus_None)
			{
				if (!Moving && !IsInIdleState())
				{
					SetStateLabel('Idle');
				}
				else if (Moving && !IsInMovingState())
				{
					SetStateLabel('Moving');
				}

				if (Order == FOrder_ComeAndHelp && bFRIENDLY && DistanceToPlayer < 512 && CanSeePlayer)
				{
					if (DistanceToPlayer < MedicRange && Status != FStatus_HealingPlayer) // [Ace] Start stapling if close enough. Minimum distance is 22. Don't go any lower or follower will be stuck walking towards you.
					{
						if (pNeedsMedic)
						{
							Status = FStatus_HealingPlayer;
							SetStateLabel('StapleHumptyDumptyBackTogetherAgain');
						}
						else if (pNeedsHelp)
						{
							Status = FStatus_HealingPlayer;
							SetStateLabel('PullYouUp');
						}
						else
						{
							Order = FOrder_Follow;
						}
					}
					else
					{
						TGoal = LinkedPlayer;
					}
				}
				else if (Order < FOrder_Cover)
				{
					if (canSeeNext)
					{
						LastKnownPos = next.Pos;
					}

					// [Ace] Go to goal if they're too far away.
					// !bSTANDSTILL means the follower will only chase goals if its current goal isn't forced.
					double DistanceToNext = Distance3D(next);
					if (bFRIENDLY && DistanceToNext > MinFollowRange / distDiv && DistanceToNext < MaxFollowRange && (!TGoal || TGoal && !TGoal.bSTANDSTILL))
					{
						if (canSeeNext)
						{
							TGoal = next;
						}
						// [Ace] If following the player and the player is nearby but suddenly goes around a corner, try to go around the same corner.
						else if (LastKnownPos != (0, 0, 0) && (!TGoal || TGoal && TGoal.pos != LastKnownPos))
						{
							TrySetGoal(LastKnownPos, SGF_IGNOREVALID);
						}
					}

					if (!Moving && IsSteppingOnSomeone())
					{
						// [Ace] Spawn a new idle spot.
						for (int i = 0; i < 100; ++i)
						{
							vector3 SpotPos = Vec3Angle(random(16, 96), random(0, 359));
							if (TrySetGoal(SpotPos))
							{
								break;
							}
						}
					}
				}
				else if (Order == FOrder_Cover && DistanceToPlayer < HDCONST_ONEMETRE * 5)
				{
					A_Face(LinkedPlayer, 45);
				}

				if (hdf_collectbrass)
				{
					VacuumBrass();
				}

				// [Ace] Using potions.
				if (Order <= FOrder_Cover && !Moving && CanHealSelf() && GetAmount('BluePotion') > 0 && GetAge() % 24 == 0)
				{
					let potion = FindLowestAmount('BluePotion');
					potion.Amount--;

					int toHeal = default.Health / 4;
					HealSelf(toHeal);
					A_StartSound("potion/chug", 5);

					if (potion.Amount == 0)
					{
						potion.Destroy();
						A_StartSound("potion/open", 6);
						
						Actor a = Spawn("SpentBottle", pos + (0, 0, height- 4), ALLOW_REPLACE);
						a.angle = angle + 2;
						a.vel = vel;
						a.A_ChangeVelocity(3, 1, 4, CVF_RELATIVE);
						
						a = Spawn("SpentCork", pos + (0, 0, height - 4) , ALLOW_REPLACE);
						a.angle = angle + 3;
						a.vel = vel;
						a.A_ChangeVelocity(5, 3, 4, CVF_RELATIVE);
					}
				}

				// [Ace] Walk away if you get too close.
				if (!Moving && DistanceToPlayer <= HDCONST_ONEMETRE / 2 + radius + LinkedPlayer.radius && GetPlayerMovementAngle() <= MaxMovementAngle && LinkedPlayer.vel.xy.length() > 1 && !(LinkedPlayer.player.ReadyWeapon is 'HDMedikitter') && !(LinkedPlayer.player.ReadyWeapon is 'SelfBandage'))
				{
					TrySetGoal(Vec3Angle(HDCONST_ONEMETRE * 1.5, AngleTo(LinkedPlayer) + 180), SGF_IGNOREVALID | SGF_MOVEAWAY);
				}
			}
		}

		// [Ace] Enemy searching.
		// [03.10.21] Note to self: This is not in the first check for a reason. Stop trying to put it there.
		if (Weapons.Size() > 0 && HasUsableWeapons() && (Status != FStatus_InCombat || !SelWeapon) && (!bFRIENDLY || Order != FOrder_FollowIgnore && Order != FOrder_GoAndCover))
		{
			LookForEnemies();
		}

		// [Ace] Crouching. One day I will implement proper sprites for this. Today is not that day.
		if (bFRIENDLY && Status <= FStatus_InCombat && Order < FOrder_Cover && PlayerIsCrouching())
		{
			CrouchFactor = min(CrouchFactor + 0.20, 0.5);
		}
		else if (CrouchFactor > 0)
		{
			CrouchFactor = max(CrouchFactor - 0.17, 0);
		}

		scale.y = default.scale.y * (1.0 - CrouchFactor);
		A_SetSize(-1, default.Height * (1.0 - CrouchFactor));

		// [Ace] Movement. Always travel to goals if there are any.
		if (Status == FStatus_None && TGoal && (TGoal is next.GetClass() && Distance2D(TGoal) > (Order == FOrder_ComeAndHelp && (pNeedsMedic || pNeedsHelp) ? MedicRange : (MinFollowRangeStop / distDiv)) || TGoal is "TargetGoal" && Distance2D(TGoal) > 16) && Distance2D(TGoal) < MaxGoalRange)
		{
			// [Ace] Don't slow down if player is bleeding out their ass or needs help getting up.
			if (TGoal is "PlayerPawn" && Order == FOrder_ComeAndHelp && (pNeedsMedic || pNeedsHelp))
			{
				if (tics == 2)
				{
					tics = 1;
				}
				MovementSpeed = MaxMovementSpeed;
			}
			else
			{
				if (Distance2D(TGoal) < HDCONST_ONEMETRE)
				{
					MovementSpeed = default.MovementSpeed / 2;
				}
				else
				{
					// [Ace] The tics adjustment is purely visual.
					if (tics == 2)
					{
						tics = 1;
					}
					MovementSpeed = min(default.MovementSpeed + Distance2D(TGoal) / (HDCONST_ONEMETRE - 2 * min(ffcount - 1, 6)), MaxMovementSpeed);
				}
			}

			// [Ace] Same as the corner thing from above but does it if the follower is moving.
			if (TGoal == next)
			{
				if (canSeeNext)
				{
					LastKnownPos = TGoal.Pos;
					A_Face(TGoal, 0, 0);
				}
				else
				{
					TrySetGoal(LastKnownPos);
				}
			}
			else
			{
				A_Face(TGoal, 0, 0);
			}

			int sideVel = 0;
			if (!(blockedSides & BSide_Left) && blockedSides & BSide_Right)
			{
				sideVel = 1;
			}
			if (blockedSides & BSide_Left && !(blockedSides & BSide_Right))
			{
				sideVel = -1;
			}
			A_ChangeVelocity(MovementSpeed, MovementSpeed * sideVel, vel.z, CVF_RELATIVE | CVF_REPLACE);
			Moving = true;

			// [Ace] Ascend/descend ladders.
			bool nearLadder = CheckProximity('hdladdertop', radius + 32) || CheckProximity('hdladderbottom', radius + 32);
			MaxDropOffHeight = default.MaxDropOffHeight + (NearLadder ? LADDER_MAX : 0);
			bFLOORHUGGER = nearLadder;

			// [Ace] There is a gap that can be crossed. If the player can do it, so can the follower.
			bNODROPOFF = !((pos.z > floorz || abs(TGoal.floorz - floorz) < default.MaxDropOffHeight) && abs(TGoal.pos.z - pos.z) < default.MaxDropOffHeight);

			// [Ace] Stop trying to reach goal shortly after losing LOS.
			if (!CheckSight(TGoal, SF_SEEPASTSHOOTABLELINES | SF_IGNOREVISIBILITY) && ++NoSightTics == 35 * 6)
			{
				NoSightTics = 0;
				ClearGoal();
			}

			// [Ace] Only play idle comments if moving.
			if (CommentTimer <= 0)
			{
				PlayIdleComment();
			}
		}
		else // [Ace] Deceleration.
		{
			vel.xy *= 0.96;

			if (Order == FOrder_GoAndCover && vel.xy.length() < 0.65)
			{
				Order = FOrder_Cover;
			}

			if (vel.xy.length() < 0.15)
			{
				ClearGoal(true);
				A_ChangeVelocity(0, 0, vel.z, CVF_REPLACE);
				Moving = false;
			}
		}
	}

	private void TryActivateLine()
	{
		FLineTraceData data;
		LineTrace(angle, 40, 0, 0, height - 8, data: data);
		if (data.HitType == FLineTraceData.TRACE_HitWall)
		{
			if (ActivateAsPlayer)
			{
				data.HitLine.Activate(LinkedPlayer, 0, SPAC_Use);
			}
			else
			{
				data.HitLine.Activate(self, 0, SPAC_Use);
			}
		}
		ActivateAsPlayer = false;
	}

	// --------------------------------------------------
	// INFORMATION
	// --------------------------------------------------
	
	private Actor GetNextInChain()
	{
		int findex = Handler.Followers.Find(self);
		for (int i = findex - 1; i >= 0; --i)
		{
			HDFollower flw = Handler.Followers[i];
			if (flw.Status != FStatus_InactiveOrDead && flw.bFRIENDLY && (flw.Order == FOrder_Follow || flw.Order == FOrder_FollowIgnore) && flw.LinkedPlayer == LinkedPlayer && Distance3D(flw) < MaxFollowRange)
			{
				return Handler.Followers[i];
			}
		}
		return LinkedPlayer;
	}

	bool IsInIdleState()
	{
		return InStateSequence(CurState, FindState('Idle'));
	}

	bool IsInMovingState()
	{
		return InStateSequence(CurState, FindState('Moving'));
	}

	bool IsSteppingOnSomeone()
	{
		if (bOnMobj)
		{
			if (Distance2D(LinkedPlayer) <= LinkedPlayer.Radius + Radius)
			{
				return true;
			}

			for (int i = 0; i < Handler.Followers.Size(); ++i)
			{
				if (Distance2D(Handler.Followers[i]) <= Handler.Followers[i].Radius + Radius)
				{
					return true;
				}
			}
		}

		return false;
	}

	int GetBlockedSides()
	{
		int sides = 0;
		FLineTraceData data;

		LineTrace(angle - 25, radius + 7, 0, TRF_THRUACTORS, height - 6, 0, -radius, data);
		if (data.HitLine)
		{
			sides |= BSide_Left;
		}
		LineTrace(angle + 25, radius + 7, 0, TRF_THRUACTORS, height - 6, 0, radius, data);
		if (data.HitLine)
		{
			sides |= BSide_Right;
		}
		
		return sides;
	}

	// --------------------------------------------------
	// CONSTANTS
	// --------------------------------------------------

	const MinFollowRangeStop = HDCONST_ONEMETRE * 2.3; // [Ace] If following the player, stop if closer than this distance.
	const MinFollowRange = HDCONST_ONEMETRE * 3;
	const MaxFollowRange = HDCONST_ONEMETRE * 20;
	const MaxWaitRange = HDCONST_ONEMETRE * 12;
	const MaxSearchRange = 24; // [Ace] This is for the LookFor* stuff.

	// --------------------------------------------------
	// VARIABLES
	// --------------------------------------------------

	HDPlayerPawn LinkedPlayer;
	protected Actor CTarget;
	private Actor TGoal;

	private bool Moving;
	FStatus Status;
	FOrder Order;
	private FOrder PrevOrder;

	private vector3 LastKnownPos;

	private int CommentTimer;
	private bool ActivateAsPlayer;
	private int NoSightTics; // [Ace] Used with CheckSight.

	private bool CanSeePlayer;
	private double DistanceToPlayer;
	private bool pNeedsHelp;
	private bool pNeedsMedic;
	private double CrouchFactor;
}