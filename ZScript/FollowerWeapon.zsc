class FollowerWeapon abstract
{
	enum CRType
	{
		CRType_Empty,
		CRType_Spent,
		CRType_Chambered
	}

	enum RResult
	{
		RResult_CanReload,
		RResult_MagFull,
		RResult_NoAmmo,
		RResult_Invalid
	}

	enum TryReloadFlags
	{
		TRF_CHECK = 1
	}

	enum EjectMagFlags
	{
		EMF_KEEP = 1
	}

	enum FollowerWeaponFlags
	{
		FWF_NOSWITCH = 1
	}

	// --------------------------------------------------
	// STATIC
	// --------------------------------------------------

	static play void CreateAndAdd(class<FollowerWeapon> wpn, HDFollower flw, bool enabled = false)
	{
		FollowerWeapon fw = FollowerWeapon(new(wpn));
		fw.Owner = flw;
		fw.Enabled = enabled;
		
		string reqStr = fw.GetRequiredWeapon();
		if (reqStr == "")
		{
			fw.Enabled = true;
		}
		else
		{
			// [Ace] Don't add weapons from mods if the mods themselves aren't loaded.
			class<HDWeapon> rw = reqStr;
			if (!rw)
			{
				return;
			}
		}

		flw.Weapons.Push(fw);
	}

	// --------------------------------------------------
	// VIRTUALS
	// --------------------------------------------------
	
	abstract string GetName() const;
	abstract string GetIcon() const;
	abstract class<HDAmmo>, class<HDMagAmmo>, int GetAmmoType() const;
	abstract Name GetRequiredWeapon() const; // [Ace] Empty string means the weapon will be available from the get go.
	abstract StateLabel GetFireState() const;
	abstract StateLabel GetReloadState() const;
	abstract play void FireWeapon();
	abstract play void OnTransfer(HDWeapon wpn);

	virtual play bool CheckWeaponCondition(HDFollower caller, Actor trgt) { return true; }
	virtual play void EmptyWeapon()
	{
		class<HDAmmo> AType; class<HDMagAmmo> MType;
		[AType, MType] = GetAmmoType();

		if (ChamberedRound == CRType_Chambered)
		{
			ChamberedRound = FollowerWeapon.CRType_Empty;
			Owner.A_SpawnItemEx(AType, random(0, 16), 0, 0, frandom(1.0, 2.0), 0, frandom(2.0, 5.0), 0, SXF_NOCHECKPOSITION);
		}

		if (Mag > 0)
		{
			if (MType)
			{
				HDMagAmmo.SpawnMag(Owner, MType, Mag);
			}
			else
			{
				Actor a; bool success;
				[success, a] = Owner.A_SpawnItemEx(AType, random(0, 16), 0, 0, frandom(1.0, 2.0), 0, frandom(2.0, 5.0), 0, SXF_NOCHECKPOSITION);
				Inventory(a).Amount = Mag;
			}
			Mag = 0;
		}
	}

	virtual double GetAdjustmentMult() const { return 1.0; }
	virtual int GetFlags() const { return 0; }
	virtual string GetLocalizationTag() const { return GetName(); }
	virtual play RResult TryReload(int flags = 0)
	{
		class<HDAmmo> AType, MType; int MaxMag;
		[AType, MType, MaxMag] = GetAmmoType();

		if (Mag >= MaxMag)
		{
			return RResult_MagFull;
		}
		if (!MType && Owner.GetAmount(AType) == 0 || MType && Owner.GetAmount(MType) == 0)
		{
			return RResult_NoAmmo;
		}
		if (flags & TRF_CHECK)
		{
			return RResult_CanReload;
		}

		if (MType)
		{
			InventorySlot wpnAmmo = Owner.FindHighestAmount(MType);
			Mag = wpnAmmo.Amount;
			wpnAmmo.Destroy();
		}
		else if (AType)
		{
			InventorySlot wpnAmmo = Owner.FindLowestAmount(AType);
			Mag++;
			wpnAmmo.Amount--;
			if (wpnAmmo.Amount == 0)
			{
				wpnAmmo.Destroy();
			}
		}

		return RResult_CanReload;
	}

	// --------------------------------------------------
	// ACTIONS
	// --------------------------------------------------
	
	play void EjectMag(int flags = EMF_KEEP)
	{
		class<HDAmmo> AType, MType; int MaxMag;
		[AType, MType, MaxMag] = GetAmmoType();
		if (MType && Mag > -1)
		{
			HDMagAmmo m = HDMagAmmo(HDMagAmmo.SpawnMag(Owner, MType, Mag));
			if (flags & EMF_KEEP)
			{
				Owner.AddMag(m, flags: HDFollower.FIF_FORCE);
			}
			Mag = -1;
		}
	}

	play bool TryChamberRound()
	{
		if (ChamberedRound == CRType_Empty && Mag > 0)
		{
			Mag--;
			ChamberedRound = CRType_Chambered;
			return true;
		}

		return false;
	}

	// --------------------------------------------------
	// INFORMATION
	// --------------------------------------------------

	clearscope bool HasAmmo()
	{
		return Mag > 0 || ChamberedRound == CRType_Chambered;
	}

	clearscope bool HasSpare()
	{
		class<HDAmmo> AType, MType;
		[AType, MType] = GetAmmoType();
		return MType && Owner.GetAmount(MType) > 0 || !MType && Owner.GetAmount(AType) > 0;
	}

	// --------------------------------------------------
	// CONSTANTS/VARIABLES
	// --------------------------------------------------

	CRType ChamberedRound;
	int Mag;
	bool HasWarnedLowAmmo;
	HDFollower Owner;
	bool Enabled;
}