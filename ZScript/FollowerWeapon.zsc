class FollowerWeapon abstract
{
	enum CRType
	{
		CRType_Empty,
		CRType_Spent,
		CRType_Chambered
	}

	enum ReloadResult
	{
		RResult_CanReload,
		RResult_MagFull,
		RResult_NoAmmo,
		RResult_Invalid
	}

	enum FireSequenceResult
	{
		FSResult_None,
		FSResult_Repeat,
		FSResult_Restart,
		FSResult_End
	}

	enum TryReloadFlags
	{
		TRF_CHECK = 1
	}

	enum EjectMagFlags
	{
		EMF_KEEP = 1
	}

	enum WStatus
	{
		WStatus_Idle,
		WStatus_Reloading,
		WStatus_Firing
	}

	// [Ace] This isn't necessary, I just use it so I don't have to pull numbers out my ass all the time. It's also relative to other weapons.
	enum WeaponPriority
	{
		WPriority_Nope = -1,
		WPriority_Lowest = 0,
		WPriority_VeryLow = 10,
		WPriority_Low = 20,
		WPriority_Medium = 30,
		WPriority_High = 40,
		WPriority_VeryHigh = 50,
		WPriority_Highest = 60
	}

	// --------------------------------------------------
	// STATIC
	// --------------------------------------------------

	static play FollowerWeapon CreateAndAdd(class<FollowerWeapon> wpn, HDFollower flw)
	{
		FollowerWeapon fw = FollowerWeapon(new(wpn));
		fw.Owner = flw;
		flw.Weapons.Push(fw);
		return fw;
	}

	static clearscope class<FollowerWeapon> ConvertToFollowerWeapon(class<HDWeapon> wpn, Array<class<FollowerWeapon> > allWeapons)
	{
		for (int i = 0; i < allWeapons.Size(); ++i)
		{
			let tempWpn = FollowerWeapon(new(allWeapons[i]));
			if (tempWpn.GetRealWeapon() == wpn)
			{
				tempWpn.Destroy();
				return allWeapons[i];
			}
			tempWpn.Destroy();
		}
		return null;
	}

	// --------------------------------------------------
	// VIRTUALS
	// --------------------------------------------------
	
	abstract string GetName() const;
	abstract string GetIcon() const;
	abstract class<HDAmmo>, class<HDMagAmmo>, int GetAmmoType() const;
	abstract Name GetRealWeapon() const;
	abstract int AssessPriority(Actor trgt, int shields, bool multitarget);
	
	// [Ace] When dealing with ticker rollback, remember that the next time the function gets called, the ticker would be what you set it to + 1.
	// So if it starts at 0 and you want to reset the loop, set it internally to -1 to compensate.
	abstract play FireSequenceResult DoFiringSequence(out int ticker);
	abstract play bool DoReloadSequence(out int ticker);
	abstract play void OnTransfer(HDWeapon wpn);

	virtual play bool CheckWeaponCondition(Actor trgt) { return true; }
	virtual play void EmptyWeapon()
	{
		class<HDAmmo> AType; class<HDMagAmmo> MType;
		[AType, MType] = GetAmmoType();

		if (ChamberedRound == CRType_Chambered)
		{
			ChamberedRound = FollowerWeapon.CRType_Empty;
			Owner.A_SpawnItemEx(AType, random(0, 16), 0, 0, frandom(1.0, 2.0), 0, frandom(2.0, 5.0), 0, SXF_NOCHECKPOSITION);
		}

		if (Mag > 0)
		{
			if (MType)
			{
				HDMagAmmo.SpawnMag(Owner, MType, Mag);
			}
			else
			{
				Actor a; bool success;
				[success, a] = Owner.A_SpawnItemEx(AType, random(0, 16), 0, 0, frandom(1.0, 2.0), 0, frandom(2.0, 5.0), 0, SXF_NOCHECKPOSITION);
				Inventory(a).Amount = Mag;
			}
			Mag = 0;
		}
	}

	virtual double GetAdjustmentMult() const { return 1.0; }
	virtual string GetLocalizationTag() const { return GetName(); }
	virtual play ReloadResult TryReload(int flags = 0)
	{
		class<HDAmmo> AType, MType; int MaxMag;
		[AType, MType, MaxMag] = GetAmmoType();

		if (Mag >= MaxMag)
		{
			return RResult_MagFull;
		}
		if (!MType && Owner.GetAmount(AType) == 0 || MType && Owner.GetAmount(MType) == 0)
		{
			return RResult_NoAmmo;
		}
		if (flags & TRF_CHECK)
		{
			return RResult_CanReload;
		}

		if (MType)
		{
			InventorySlot wpnAmmo = Owner.FindHighestAmount(MType);
			Mag = wpnAmmo.Amount;
			Owner.TakeInvItem(wpnAmmo, HDFollower.FIF_FORCE | HDFollower.FIF_REMOVE);
		}
		else if (AType)
		{
			InventorySlot wpnAmmo = Owner.FindLowestAmount(AType);
			Mag++;
			wpnAmmo.Amount--;
			if (wpnAmmo.Amount == 0)
			{
				Owner.TakeInvItem(wpnAmmo, HDFollower.FIF_FORCE | HDFollower.FIF_REMOVE);
			}
		}

		return RResult_CanReload;
	}

	// --------------------------------------------------
	// ACTIONS
	// --------------------------------------------------
	
	play void EjectMag(int flags = EMF_KEEP)
	{
		class<HDAmmo> AType, MType; int MaxMag;
		[AType, MType, MaxMag] = GetAmmoType();
		if (MType && Mag > -1)
		{
			HDMagAmmo m = HDMagAmmo(HDMagAmmo.SpawnMag(Owner, MType, Mag));
			if (flags & EMF_KEEP)
			{
				Owner.AddMag(m, flags: HDFollower.FIF_FORCE);
			}
			Mag = -1;
		}
	}

	play bool TryChamberRound()
	{
		if (ChamberedRound == CRType_Empty && Mag > 0)
		{
			Mag--;
			ChamberedRound = CRType_Chambered;
			return true;
		}

		return false;
	}

	// --------------------------------------------------
	// INFORMATION
	// --------------------------------------------------

	clearscope bool HasAmmo()
	{
		return Mag > 0 || ChamberedRound == CRType_Chambered;
	}

	clearscope bool HasSpare()
	{
		class<HDAmmo> AType, MType;
		[AType, MType] = GetAmmoType();
		return MType && Owner.GetAmount(MType) > 0 || !MType && Owner.GetAmount(AType) > 0;
	}

	// --------------------------------------------------
	// CONSTANTS/VARIABLES
	// --------------------------------------------------

	CRType ChamberedRound;
	int Mag;
	bool HasWarnedLowAmmo;
	HDFollower Owner;
	bool Enabled;
	WStatus Status;
}