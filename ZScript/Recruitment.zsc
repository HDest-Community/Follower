extend class FollowerHandler
{
	// --------------------------------------------------
	// STATIC
	// --------------------------------------------------

	static bool IsPuppet(Actor a)
	{
		ThinkerIterator it = ThinkerIterator.Create('AngelFire', Thinker.STAT_DEFAULT);
		AngelFire f;
		while ((f = AngelFire(it.Next())))
		{
			if (f.master && f.master == a)
			{
				return true;
			}
		}
		return false;
	}

	// --------------------------------------------------
	// ACTIONS
	// --------------------------------------------------

	private void RecruitMarine(HDOperator m, int owningPlayer)
	{
		if (!m)
		{
			return;
		}

		if (!m.bFRIENDLY && random(0, 2))
		{
			string msg = "Go to hell, sucker.";
			switch(random[msgrand](1, 3))
			{
				case 1: msg = "Kiss my ass."; break;
				case 2: msg = "Go fuck yourself."; break;
				case 3: msg = "HA HA HA *cough* I'd rather die."; break;
			}
			players[owningPlayer].mo.A_Log("\c[White]Marine: \c[Green]"..msg.."\c-");
			players[owningPlayer].mo.A_StartSound("misc/chat", 20, CHANF_LOCAL);
			m.DamageMobj(m, m, m.Health, 'maxhpdrain', DMG_FORCED);

			Actor a; bool success;
			[success, a] = m.A_SpawnItemEx("HDFragGrenade", 2, 0, 2, 1, 0, 2, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERPOINTERS);
			m.A_SpawnItemEx("HDFragSpoon", 2, 0, 2,random(1, 2), 0, random(8, 16), random(-12, 12), SXF_NOCHECKPOSITION);
			if (success)
			{
				HDFragGrenade(a).fuze += 100;
			}
			return;
		}
		else if (!m.bFRIENDLY)
		{
			string msg = "Alright, fine.";
			switch(random[msgrand](1, 3))
			{
				case 1: msg = "Don't kill me. I'll fight on your side."; break;
				case 2: msg = "You win."; break;
				case 3: msg = "The pay was bad anyway."; break;
			}
			players[owningPlayer].mo.A_Log("\c[White]Marine: \c[Green]"..msg.."\c-");
			players[owningPlayer].mo.A_StartSound("misc/chat", 20, CHANF_LOCAL);
			m.bFRIENDLY = true;
		}
		else
		{
			string msg = "Lead the way.";
			switch(random[msgrand](1, 3))
			{
				case 1: msg = "At your service."; break;
				case 2: msg = "At your command."; break;
				case 3: msg = "Point and I'll shoot."; break;
			}
			players[owningPlayer].mo.A_Log("\c[White]Marine: \c[Green]"..msg.."\c-");
			players[owningPlayer].mo.A_StartSound("misc/chat", 20, CHANF_LOCAL);
		}

		HDFollower Recruit = CreateFollower('RecruitedMarine', owningPlayer, m.pos);

		int Gender = 0;
		string snd = m.SeeSound;
		if (snd.IndexOf("operatorf") != -1)
		{
			Gender = 1;
		}
		else if (snd.IndexOf("operatorn") != -1 || snd.IndexOf("operatorb") != -1)
		{
			Gender = 2;
		}
		Recruit.angle = m.angle;
		Recruit.Health = m.Health;
		Recruit.Gender = Gender;
		Recruit.SeeSound = m.SeeSound;
		Recruit.PainSound = m.PainSound;
		Recruit.DeathSound = m.DeathSound;
		Recruit.DisplayName = GetUniqueMarineName(Gender);
		Recruit.Translation = m.Translation;

		switch (m.wep)
		{
			case HDOperator.HDMW_SMG: Recruit.FindWeapon('FW_SMG').Enabled = true; break;
			case HDOperator.HDMW_HUNTER: Recruit.FindWeapon('FW_Hunter').Enabled = true; break;
			case HDOperator.HDMW_ZM66: Recruit.FindWeapon('FW_ZM66').Enabled = true; break;
			case HDOperator.HDMW_ROCKET: Recruit.FindWeapon('FW_RocketLauncher').Enabled = true; break;
		}

		let Armor = HDArmourWorn(m.FindInventory('HDArmourWorn'));
		if (Armor)
		{
			let NewArmor = HDArmourWorn(Recruit.GiveInventoryType('HDArmourWorn'));
			NewArmor.Durability = Armor.Durability;
			NewArmor.Mega = Armor.Mega;
		}

		if (m.InStateSequence(m.CurState, m.FindState('Falldown')))
		{
			Recruit.Status = FStatus_InactiveOrDead;
			Recruit.SetStateLabel('Standup');
		}

		m.Destroy();
	}

	// --------------------------------------------------
	// INFORMATION
	// --------------------------------------------------

	private string GetUniqueMarineName(int gender)
	{
		string UniqueName = "Anonymous";
		static const string MaleNames[] =
		{
			"Arcturus", "Proteus", "Orion", "Deimos", "Kawaimomona", "Kaihalulu", "Kalani", "Akamu", "Amari", "Sanjuro", "Tezuka", "Hoshino", "Ota", "Soma", "Kashiwa", "Nakada",
			"Haddi", "Gunnar", "Isekai", "Mikkel", "Adel", "JÃ³nar", "Kasper", "Steinn", "Gustav", "Leonhard", "Leon", "Loki", "Vilbert", "Almar", "Stadius", "Mikail", "Koen", "Gino",
			"Marc", "Fabio", "Andrea", "Bernard", "Aleksy", "Roch", "Bartosz", "Maciej", "Marek", "Stryker", "Arkadiusz", "Adoranz", "Tristan", "Isaiah", "Mebunai", "Eleazar", "Ishbaal",
			"Ahiam", "Hiddai", "Elhanan", "Abiezer", "Ithai", "Eliam", "Uriah", "Fane", "Reks", "Zayne", "Salvador", "Zeus", "Axton", "Zane", "Blake", "Raynor", "Jim", "Thomas", "Ronald",
			"Wayn", "Lero", "Leon", "Jack", "Armanis", "Krieg", "Emerton", "Samael", "Kragoth", "Blisk", "Ryo", "Nathaniel", "Killian", "Dominic", "Santiago", "Sebastian", "Malcolm",
			"Rakanoth", "Ixanos", "Nick", "Bane", "Kaada", "Loque", "Xan", "Isaak", "Hawkins", "Ne'Ban", "Miller", "Othello", "Abaddon", "Anubis", "Raiden", "Mengsk"
		};
		static const string FemaleNames[] =
		{
			"Arlin", "Elaine", "Ophelia", "Almedha", "Sana", "Karmin", "Ashera", "Liv", "Yrsa", "Kristiane", "Irene", "Hedvig", "Lena", "Freja", "Maya", "Kristine", "Elin", "Emeryn",
			"Amelix", "Emson", "Rayne", "Azraelle", "Visse", "Ephemera", "Samantha", "Kura", "Kyra", "Malise", "Faith", "Edela", "Alice", "Ymir", "Lauren", "Alana", "Akasha", "Avicia",
			"Lillian", "Lilith", "May", "Eleanor", "Yuzuki", "Kaede", "Aida", "Sapphire", "Selket", "Bastet", "Hathor", "Nekhbet", "Tayet", "Auriel", "Nephthys", "Athena", "Artemis",
			"Eirene", "Eris", "Freya", "Hera", "Juno", "Kali", "Luna", "Maeve", "Minerva", "Persephone", "Rhea", "Selene", "Themis"
		};
		static const string NeutralNames[] =
		{
			"Tempest", "Cinder", "Vexx", "Drace", "Klyn", "Vayne", "Vail", "Brick", "Zero", "Blade", "Apocalypse", "Thunder", "Void", "Kanzaxe", "Hatchet", "Blink", "Whiskey", "Splinter",
			"Light", "Reaper", "Jet", "Wraith", "Quill", "Discount", "Death", "Nil", "Umbra", "Scar", "Curse", "Banshee", "Arrow", "Dash", "Niven", "Phantom", "Barricade", "Enigma",
			"Matrix", "Entropy", "Raven", "Nomad", "Prophet", "Jester", "Psycho", "Blitz", "Scorpion", "Fury", "Arclite", "Redeemer", "Bishop", "War", "Wrath", "Pestilence", "Inferno"
		};

		string PickedName = "";
		Array<int> IteratedIndices;

		int Size = 0;
		switch (gender)
		{
			case 0: Size = MaleNames.Size(); break;
			case 1: Size = FemaleNames.Size(); break;
			case 2: Size = NeutralNames.Size(); break;
		}

		do
		{
			int Index = random[rmnamerand](0, Size - 1);
			if (IteratedIndices.Size() > 0 && IteratedIndices.Find(Index) != IteratedIndices.Size())
			{
				continue;
			}

			IteratedIndices.Push(Index);

			switch (gender)
			{
				case 0: PickedName = MaleNames[Index]; break;
				case 1: PickedName = FemaleNames[Index]; break;
				case 2: PickedName = NeutralNames[Index]; break;
			}

			if (!NameExists(PickedName))
			{
				UniqueName = PickedName;
				break;
			}
		} while (IteratedIndices.Size() < Size);

		return UniqueName;
	}

	private bool NameExists(string followerName)
	{
		for (int i = 0; i < Followers.Size(); ++i)
		{
			if (Followers[i].DisplayName ~== followerName)
			{
				return true;
			}
		}

		Array<FollowerBody> InvFollowers;
		FetchFollowersInInventory(InvFollowers);
		for (int i = 0; i < InvFollowers.Size(); ++i)
		{
			for (int j = 0; j < InvFollowers[i].Data.Size(); ++j)
			{
				if (InvFollowers[i].Data[j].DisplayName ~== followerName)
				{
					return true;
				}
			}
		}

		return false;
	}
}